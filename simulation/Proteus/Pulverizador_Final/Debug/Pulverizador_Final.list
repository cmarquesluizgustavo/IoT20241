
Pulverizador_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004504  08004504  00005504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a4  080045a4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080045a4  080045a4  000055a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045ac  080045ac  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045ac  080045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080045b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000005c  08004610  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08004610  000062e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c054  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c32  00000000  00000000  000120d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00013d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098c  00000000  00000000  00014938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001764c  00000000  00000000  000152c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dae8  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881c6  00000000  00000000  0003a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c25be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003918  00000000  00000000  000c2604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c5f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080044ec 	.word	0x080044ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080044ec 	.word	0x080044ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <delay>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */

void delay (uint16_t time)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <delay+0x2c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 800095e:	bf00      	nop
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <delay+0x2c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	429a      	cmp	r2, r3
 800096a:	d3f9      	bcc.n	8000960 <delay+0x14>
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000078 	.word	0x20000078
 800097c:	00000000 	.word	0x00000000

08000980 <HCSR04_Read1>:

int HCSR04_Read1(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_PIN_GPIO_Port, TRIGGER_PIN_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800098c:	4840      	ldr	r0, [pc, #256]	@ (8000a90 <HCSR04_Read1+0x110>)
 800098e:	f001 fa82 	bl	8001e96 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000992:	200a      	movs	r0, #10
 8000994:	f7ff ffda 	bl	800094c <delay>
	HAL_GPIO_WritePin(TRIGGER_PIN_GPIO_Port, TRIGGER_PIN_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	483c      	ldr	r0, [pc, #240]	@ (8000a90 <HCSR04_Read1+0x110>)
 80009a0:	f001 fa79 	bl	8001e96 <HAL_GPIO_WritePin>
	delay(100); // wait for 100 us
 80009a4:	2064      	movs	r0, #100	@ 0x64
 80009a6:	f7ff ffd1 	bl	800094c <delay>

    // Leitura do tempo de resposta
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80009aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000a94 <HCSR04_Read1+0x114>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
    uint32_t startTick = __HAL_TIM_GET_COUNTER (&htim1);
 80009b2:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <HCSR04_Read1+0x114>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b8:	613b      	str	r3, [r7, #16]
    int state = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET);
 80009ba:	2101      	movs	r1, #1
 80009bc:	4834      	ldr	r0, [pc, #208]	@ (8000a90 <HCSR04_Read1+0x110>)
 80009be:	f001 fa53 	bl	8001e68 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	617b      	str	r3, [r7, #20]
    while (state) {
 80009d0:	e016      	b.n	8000a00 <HCSR04_Read1+0x80>
    	state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET;
 80009d2:	2101      	movs	r1, #1
 80009d4:	482e      	ldr	r0, [pc, #184]	@ (8000a90 <HCSR04_Read1+0x110>)
 80009d6:	f001 fa47 	bl	8001e68 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf0c      	ite	eq
 80009e0:	2301      	moveq	r3, #1
 80009e2:	2300      	movne	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	617b      	str	r3, [r7, #20]

        if ((__HAL_TIM_GET_COUNTER (&htim1) - startTick) > 50000) {
 80009e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <HCSR04_Read1+0x114>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d902      	bls.n	8000a00 <HCSR04_Read1+0x80>
            return -1;  // Timeout
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e03d      	b.n	8000a7c <HCSR04_Read1+0xfc>
    while (state) {
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d1e5      	bne.n	80009d2 <HCSR04_Read1+0x52>
        }
    }
    uint32_t startTime = __HAL_TIM_GET_COUNTER (&htim1);
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <HCSR04_Read1+0x114>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a0c:	60fb      	str	r3, [r7, #12]
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000a0e:	e00b      	b.n	8000a28 <HCSR04_Read1+0xa8>
        if ((__HAL_TIM_GET_COUNTER (&htim1) - startTime) > 50000) {
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <HCSR04_Read1+0x114>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d902      	bls.n	8000a28 <HCSR04_Read1+0xa8>
            return -1;  // Timeout
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e029      	b.n	8000a7c <HCSR04_Read1+0xfc>
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4819      	ldr	r0, [pc, #100]	@ (8000a90 <HCSR04_Read1+0x110>)
 8000a2c:	f001 fa1c 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d0ec      	beq.n	8000a10 <HCSR04_Read1+0x90>
        }
    }
    uint32_t endTime = __HAL_TIM_GET_COUNTER (&htim1);
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HCSR04_Read1+0x114>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a3c:	60bb      	str	r3, [r7, #8]
    uint32_t duration = endTime - startTime;
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	607b      	str	r3, [r7, #4]
    // Calcula a distância
    int distance = (duration * 0.0343) / 2; // Velocidade do som = 34300 cm/s
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fccc 	bl	80003e4 <__aeabi_ui2d>
 8000a4c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000a88 <HCSR04_Read1+0x108>)
 8000a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a52:	f7ff fd41 	bl	80004d8 <__aeabi_dmul>
 8000a56:	4602      	mov	r2, r0
 8000a58:	460b      	mov	r3, r1
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f04f 0200 	mov.w	r2, #0
 8000a62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a66:	f7ff fe61 	bl	800072c <__aeabi_ddiv>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	f7ff ff43 	bl	80008fc <__aeabi_d2iz>
 8000a76:	4603      	mov	r3, r0
 8000a78:	603b      	str	r3, [r7, #0]
    return distance;
 8000a7a:	683b      	ldr	r3, [r7, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	f3af 8000 	nop.w
 8000a88:	04816f00 	.word	0x04816f00
 8000a8c:	3fa18fc5 	.word	0x3fa18fc5
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	20000078 	.word	0x20000078

08000a98 <HCSR04_Read2>:
#define TRIG_PIN_MEIO	GPIO_PIN_15
#define ECHO_PORT_MEIO 	GPIOB
#define ECHO_PIN_MEIO	GPIO_PIN_1

int HCSR04_Read2(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_MEIO, TRIG_PIN_MEIO, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aa4:	4840      	ldr	r0, [pc, #256]	@ (8000ba8 <HCSR04_Read2+0x110>)
 8000aa6:	f001 f9f6 	bl	8001e96 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f7ff ff4e 	bl	800094c <delay>
	HAL_GPIO_WritePin(TRIG_PORT_MEIO, TRIG_PIN_MEIO, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ab6:	483c      	ldr	r0, [pc, #240]	@ (8000ba8 <HCSR04_Read2+0x110>)
 8000ab8:	f001 f9ed 	bl	8001e96 <HAL_GPIO_WritePin>
	delay(100); // wait for 100 us
 8000abc:	2064      	movs	r0, #100	@ 0x64
 8000abe:	f7ff ff45 	bl	800094c <delay>

    // Leitura do tempo de resposta
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <HCSR04_Read2+0x114>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    uint32_t startTick = __HAL_TIM_GET_COUNTER (&htim1);
 8000aca:	4b38      	ldr	r3, [pc, #224]	@ (8000bac <HCSR04_Read2+0x114>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad0:	613b      	str	r3, [r7, #16]
    int state = (HAL_GPIO_ReadPin(ECHO_PORT_MEIO, ECHO_PIN_MEIO) == GPIO_PIN_RESET);
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4834      	ldr	r0, [pc, #208]	@ (8000ba8 <HCSR04_Read2+0x110>)
 8000ad6:	f001 f9c7 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bf0c      	ite	eq
 8000ae0:	2301      	moveq	r3, #1
 8000ae2:	2300      	movne	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	617b      	str	r3, [r7, #20]
    while (state) {
 8000ae8:	e016      	b.n	8000b18 <HCSR04_Read2+0x80>
    	state = HAL_GPIO_ReadPin(ECHO_PORT_MEIO, ECHO_PIN_MEIO) == GPIO_PIN_RESET;
 8000aea:	2102      	movs	r1, #2
 8000aec:	482e      	ldr	r0, [pc, #184]	@ (8000ba8 <HCSR04_Read2+0x110>)
 8000aee:	f001 f9bb 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	617b      	str	r3, [r7, #20]

        if ((__HAL_TIM_GET_COUNTER (&htim1) - startTick) > 50000) {
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <HCSR04_Read2+0x114>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d902      	bls.n	8000b18 <HCSR04_Read2+0x80>
            return -1;  // Timeout
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	e03d      	b.n	8000b94 <HCSR04_Read2+0xfc>
    while (state) {
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1e5      	bne.n	8000aea <HCSR04_Read2+0x52>
        }
    }
    uint32_t startTime = __HAL_TIM_GET_COUNTER (&htim1);
 8000b1e:	4b23      	ldr	r3, [pc, #140]	@ (8000bac <HCSR04_Read2+0x114>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b24:	60fb      	str	r3, [r7, #12]
    while (HAL_GPIO_ReadPin(ECHO_PORT_MEIO, ECHO_PIN_MEIO) == GPIO_PIN_SET) {
 8000b26:	e00b      	b.n	8000b40 <HCSR04_Read2+0xa8>
        if ((__HAL_TIM_GET_COUNTER (&htim1) - startTime) > 50000) {
 8000b28:	4b20      	ldr	r3, [pc, #128]	@ (8000bac <HCSR04_Read2+0x114>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d902      	bls.n	8000b40 <HCSR04_Read2+0xa8>
            return -1;  // Timeout
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e029      	b.n	8000b94 <HCSR04_Read2+0xfc>
    while (HAL_GPIO_ReadPin(ECHO_PORT_MEIO, ECHO_PIN_MEIO) == GPIO_PIN_SET) {
 8000b40:	2102      	movs	r1, #2
 8000b42:	4819      	ldr	r0, [pc, #100]	@ (8000ba8 <HCSR04_Read2+0x110>)
 8000b44:	f001 f990 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d0ec      	beq.n	8000b28 <HCSR04_Read2+0x90>
        }
    }
    uint32_t endTime = __HAL_TIM_GET_COUNTER(&htim1);
 8000b4e:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <HCSR04_Read2+0x114>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b54:	60bb      	str	r3, [r7, #8]
    uint32_t duration = endTime - startTime;
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	607b      	str	r3, [r7, #4]
    // Calcula a distância
    int distance = (duration * 0.0343) / 2; // Velocidade do som = 34300 cm/s
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fc40 	bl	80003e4 <__aeabi_ui2d>
 8000b64:	a30e      	add	r3, pc, #56	@ (adr r3, 8000ba0 <HCSR04_Read2+0x108>)
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	f7ff fcb5 	bl	80004d8 <__aeabi_dmul>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	460b      	mov	r3, r1
 8000b72:	4610      	mov	r0, r2
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b7e:	f7ff fdd5 	bl	800072c <__aeabi_ddiv>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	4610      	mov	r0, r2
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f7ff feb7 	bl	80008fc <__aeabi_d2iz>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	603b      	str	r3, [r7, #0]
    return distance;
 8000b92:	683b      	ldr	r3, [r7, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	f3af 8000 	nop.w
 8000ba0:	04816f00 	.word	0x04816f00
 8000ba4:	3fa18fc5 	.word	0x3fa18fc5
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	20000078 	.word	0x20000078

08000bb0 <HCSR04_Read3>:
#define TRIG_PIN_DIREITA	GPIO_PIN_13
#define ECHO_PORT_DIREITA 	GPIOB
#define ECHO_PIN_DIREITA	GPIO_PIN_2

int HCSR04_Read3(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_DIREITA, TRIG_PIN_DIREITA, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bbc:	4840      	ldr	r0, [pc, #256]	@ (8000cc0 <HCSR04_Read3+0x110>)
 8000bbe:	f001 f96a 	bl	8001e96 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f7ff fec2 	bl	800094c <delay>
	HAL_GPIO_WritePin(TRIG_PORT_DIREITA, TRIG_PIN_DIREITA, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bce:	483c      	ldr	r0, [pc, #240]	@ (8000cc0 <HCSR04_Read3+0x110>)
 8000bd0:	f001 f961 	bl	8001e96 <HAL_GPIO_WritePin>
	delay(100); // wait for 100 us
 8000bd4:	2064      	movs	r0, #100	@ 0x64
 8000bd6:	f7ff feb9 	bl	800094c <delay>

    // Leitura do tempo de resposta
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000bda:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc4 <HCSR04_Read3+0x114>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
    uint32_t startTick = __HAL_TIM_GET_COUNTER (&htim1);
 8000be2:	4b38      	ldr	r3, [pc, #224]	@ (8000cc4 <HCSR04_Read3+0x114>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be8:	613b      	str	r3, [r7, #16]
    int state = (HAL_GPIO_ReadPin(ECHO_PORT_DIREITA, ECHO_PIN_DIREITA) == GPIO_PIN_RESET);
 8000bea:	2104      	movs	r1, #4
 8000bec:	4834      	ldr	r0, [pc, #208]	@ (8000cc0 <HCSR04_Read3+0x110>)
 8000bee:	f001 f93b 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	617b      	str	r3, [r7, #20]
    while (state) {
 8000c00:	e016      	b.n	8000c30 <HCSR04_Read3+0x80>
    	state = HAL_GPIO_ReadPin(ECHO_PORT_DIREITA, ECHO_PIN_DIREITA) == GPIO_PIN_RESET;
 8000c02:	2104      	movs	r1, #4
 8000c04:	482e      	ldr	r0, [pc, #184]	@ (8000cc0 <HCSR04_Read3+0x110>)
 8000c06:	f001 f92f 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf0c      	ite	eq
 8000c10:	2301      	moveq	r3, #1
 8000c12:	2300      	movne	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	617b      	str	r3, [r7, #20]

        if ((__HAL_TIM_GET_COUNTER (&htim1) - startTick) > 50000) {
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <HCSR04_Read3+0x114>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d902      	bls.n	8000c30 <HCSR04_Read3+0x80>
            return -1;  // Timeout
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e03d      	b.n	8000cac <HCSR04_Read3+0xfc>
    while (state) {
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1e5      	bne.n	8000c02 <HCSR04_Read3+0x52>
        }
    }
    uint32_t startTime = __HAL_TIM_GET_COUNTER (&htim1);
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <HCSR04_Read3+0x114>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3c:	60fb      	str	r3, [r7, #12]
    while (HAL_GPIO_ReadPin(ECHO_PORT_DIREITA, ECHO_PIN_DIREITA) == GPIO_PIN_SET) {
 8000c3e:	e00b      	b.n	8000c58 <HCSR04_Read3+0xa8>
        if ((__HAL_TIM_GET_COUNTER (&htim1) - startTime) > 50000) {
 8000c40:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <HCSR04_Read3+0x114>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d902      	bls.n	8000c58 <HCSR04_Read3+0xa8>
            return -1;  // Timeout
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e029      	b.n	8000cac <HCSR04_Read3+0xfc>
    while (HAL_GPIO_ReadPin(ECHO_PORT_DIREITA, ECHO_PIN_DIREITA) == GPIO_PIN_SET) {
 8000c58:	2104      	movs	r1, #4
 8000c5a:	4819      	ldr	r0, [pc, #100]	@ (8000cc0 <HCSR04_Read3+0x110>)
 8000c5c:	f001 f904 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d0ec      	beq.n	8000c40 <HCSR04_Read3+0x90>
        }
    }
    uint32_t endTime = __HAL_TIM_GET_COUNTER(&htim1);
 8000c66:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <HCSR04_Read3+0x114>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c6c:	60bb      	str	r3, [r7, #8]
    uint32_t duration = endTime - startTime;
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	607b      	str	r3, [r7, #4]
    // Calcula a distância
    int distance = (duration * 0.0343) / 2; // Velocidade do som = 34300 cm/s
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fbb4 	bl	80003e4 <__aeabi_ui2d>
 8000c7c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000cb8 <HCSR04_Read3+0x108>)
 8000c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c82:	f7ff fc29 	bl	80004d8 <__aeabi_dmul>
 8000c86:	4602      	mov	r2, r0
 8000c88:	460b      	mov	r3, r1
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c96:	f7ff fd49 	bl	800072c <__aeabi_ddiv>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f7ff fe2b 	bl	80008fc <__aeabi_d2iz>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	603b      	str	r3, [r7, #0]
    return distance;
 8000caa:	683b      	ldr	r3, [r7, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	04816f00 	.word	0x04816f00
 8000cbc:	3fa18fc5 	.word	0x3fa18fc5
 8000cc0:	40010c00 	.word	0x40010c00
 8000cc4:	20000078 	.word	0x20000078

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	@ 0x38
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 fba7 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f863 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f000 f969 	bl	8000fac <MX_GPIO_Init>
  MX_DMA_Init();
 8000cda:	f000 f949 	bl	8000f70 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cde:	f000 f8f3 	bl	8000ec8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ce2:	f000 f91b 	bl	8000f1c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ce6:	f000 f899 	bl	8000e1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  int esquerda, meio, direita;

  HAL_TIM_Base_Start(&htim1);
 8000cea:	4827      	ldr	r0, [pc, #156]	@ (8000d88 <main+0xc0>)
 8000cec:	f001 fcfc 	bl	80026e8 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  esquerda = HCSR04_Read1();
 8000cf0:	f7ff fe46 	bl	8000980 <HCSR04_Read1>
 8000cf4:	6378      	str	r0, [r7, #52]	@ 0x34
	  meio = HCSR04_Read2();
 8000cf6:	f7ff fecf 	bl	8000a98 <HCSR04_Read2>
 8000cfa:	6338      	str	r0, [r7, #48]	@ 0x30
	  direita = HCSR04_Read3();
 8000cfc:	f7ff ff58 	bl	8000bb0 <HCSR04_Read3>
 8000d00:	62f8      	str	r0, [r7, #44]	@ 0x2c

	  //sprintf(MSG, "%d,  %d,  %d  \r\n", esquerda, meio, direita);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), 100);


	  if(esquerda - direita > 5){
 8000d02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	dd10      	ble.n	8000d2e <main+0x66>
		  sprintf(MSG, "Va para a esquerda \r\n");
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	491f      	ldr	r1, [pc, #124]	@ (8000d8c <main+0xc4>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 ff3b 	bl	8003b8c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), 100);
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fa19 	bl	8000150 <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	1d39      	adds	r1, r7, #4
 8000d24:	2364      	movs	r3, #100	@ 0x64
 8000d26:	481a      	ldr	r0, [pc, #104]	@ (8000d90 <main+0xc8>)
 8000d28:	f002 f95c 	bl	8002fe4 <HAL_UART_Transmit>
 8000d2c:	e014      	b.n	8000d58 <main+0x90>
	  }
	  else if(direita - esquerda > 5){
 8000d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	dd0f      	ble.n	8000d58 <main+0x90>
		  sprintf(MSG, "Va para a direita \r\n");
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4916      	ldr	r1, [pc, #88]	@ (8000d94 <main+0xcc>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 ff25 	bl	8003b8c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), 100);
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fa03 	bl	8000150 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	1d39      	adds	r1, r7, #4
 8000d50:	2364      	movs	r3, #100	@ 0x64
 8000d52:	480f      	ldr	r0, [pc, #60]	@ (8000d90 <main+0xc8>)
 8000d54:	f002 f946 	bl	8002fe4 <HAL_UART_Transmit>
	  }

	  if(meio < 40){
 8000d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d5a:	2b27      	cmp	r3, #39	@ 0x27
 8000d5c:	dc0f      	bgt.n	8000d7e <main+0xb6>
		  sprintf(MSG, "Fim da rua \r\n");
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <main+0xd0>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 ff12 	bl	8003b8c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)MSG, strlen(MSG), 100);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff f9f0 	bl	8000150 <strlen>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	1d39      	adds	r1, r7, #4
 8000d76:	2364      	movs	r3, #100	@ 0x64
 8000d78:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <main+0xc8>)
 8000d7a:	f002 f933 	bl	8002fe4 <HAL_UART_Transmit>
	  }
	  HAL_Delay(500);
 8000d7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d82:	f000 fbaf 	bl	80014e4 <HAL_Delay>
	  esquerda = HCSR04_Read1();
 8000d86:	e7b3      	b.n	8000cf0 <main+0x28>
 8000d88:	20000078 	.word	0x20000078
 8000d8c:	08004504 	.word	0x08004504
 8000d90:	200000c0 	.word	0x200000c0
 8000d94:	0800451c 	.word	0x0800451c
 8000d98:	08004534 	.word	0x08004534

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b090      	sub	sp, #64	@ 0x40
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	2228      	movs	r2, #40	@ 0x28
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 ff0e 	bl	8003bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000dd2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 f873 	bl	8001ec8 <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000de8:	f000 f938 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2302      	movs	r3, #2
 8000df2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fae1 	bl	80023cc <HAL_RCC_ClockConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e10:	f000 f924 	bl	800105c <Error_Handler>
  }
}
 8000e14:	bf00      	nop
 8000e16:	3740      	adds	r7, #64	@ 0x40
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e38:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e3a:	4a22      	ldr	r2, [pc, #136]	@ (8000ec4 <MX_TIM1_Init+0xa8>)
 8000e3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e40:	220f      	movs	r2, #15
 8000e42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000e64:	4816      	ldr	r0, [pc, #88]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e66:	f001 fc83 	bl	8002770 <HAL_TIM_IC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e70:	f000 f8f4 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	480f      	ldr	r0, [pc, #60]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000e84:	f001 fff4 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e8e:	f000 f8e5 	bl	800105c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e96:	2301      	movs	r3, #1
 8000e98:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_TIM1_Init+0xa4>)
 8000eaa:	f001 fdb8 	bl	8002a1e <HAL_TIM_IC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000eb4:	f000 f8d2 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000078 	.word	0x20000078
 8000ec4:	40012c00 	.word	0x40012c00

08000ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <MX_USART1_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f002 f820 	bl	8002f44 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f0a:	f000 f8a7 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000c0 	.word	0x200000c0
 8000f18:	40013800 	.word	0x40013800

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <MX_USART2_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f001 fff6 	bl	8002f44 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 f87d 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000108 	.word	0x20000108
 8000f6c:	40004400 	.word	0x40004400

08000f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_DMA_Init+0x38>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <MX_DMA_Init+0x38>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_DMA_Init+0x38>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2011      	movs	r0, #17
 8000f94:	f000 fba1 	bl	80016da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f98:	2011      	movs	r0, #17
 8000f9a:	f000 fbba 	bl	8001712 <HAL_NVIC_EnableIRQ>

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40021000 	.word	0x40021000

08000fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a23      	ldr	r2, [pc, #140]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000fc6:	f043 0320 	orr.w	r3, r3, #32
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0320 	and.w	r3, r3, #32
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a17      	ldr	r2, [pc, #92]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_GPIO_Init+0xa8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|TRIGGER_PIN_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800100e:	4812      	ldr	r0, [pc, #72]	@ (8001058 <MX_GPIO_Init+0xac>)
 8001010:	f000 ff41 	bl	8001e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001014:	2307      	movs	r3, #7
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480c      	ldr	r0, [pc, #48]	@ (8001058 <MX_GPIO_Init+0xac>)
 8001028:	f000 fda2 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 TRIGGER_PIN_Pin PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TRIGGER_PIN_Pin|GPIO_PIN_15;
 800102c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	4619      	mov	r1, r3
 8001044:	4804      	ldr	r0, [pc, #16]	@ (8001058 <MX_GPIO_Init+0xac>)
 8001046:	f000 fd93 	bl	8001b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	40010c00 	.word	0x40010c00

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_MspInit+0x5c>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_MspInit+0x60>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_MspInit+0x60>)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000

080010cc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001150 <HAL_TIM_IC_MspInit+0x84>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d12c      	bne.n	8001146 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_TIM_IC_MspInit+0x88>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a18      	ldr	r2, [pc, #96]	@ (8001154 <HAL_TIM_IC_MspInit+0x88>)
 80010f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_TIM_IC_MspInit+0x88>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_TIM_IC_MspInit+0x88>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <HAL_TIM_IC_MspInit+0x88>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_TIM_IC_MspInit+0x88>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001120:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	4809      	ldr	r0, [pc, #36]	@ (8001158 <HAL_TIM_IC_MspInit+0x8c>)
 8001132:	f000 fd1d 	bl	8001b70 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	201b      	movs	r0, #27
 800113c:	f000 facd 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001140:	201b      	movs	r0, #27
 8001142:	f000 fae6 	bl	8001712 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40012c00 	.word	0x40012c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a4e      	ldr	r2, [pc, #312]	@ (80012b0 <HAL_UART_MspInit+0x154>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d13a      	bne.n	80011f2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117c:	4b4d      	ldr	r3, [pc, #308]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a4c      	ldr	r2, [pc, #304]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b4a      	ldr	r3, [pc, #296]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a46      	ldr	r2, [pc, #280]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	4619      	mov	r1, r3
 80011c0:	483d      	ldr	r0, [pc, #244]	@ (80012b8 <HAL_UART_MspInit+0x15c>)
 80011c2:	f000 fcd5 	bl	8001b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4619      	mov	r1, r3
 80011da:	4837      	ldr	r0, [pc, #220]	@ (80012b8 <HAL_UART_MspInit+0x15c>)
 80011dc:	f000 fcc8 	bl	8001b70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2025      	movs	r0, #37	@ 0x25
 80011e6:	f000 fa78 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ea:	2025      	movs	r0, #37	@ 0x25
 80011ec:	f000 fa91 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f0:	e05a      	b.n	80012a8 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a31      	ldr	r2, [pc, #196]	@ (80012bc <HAL_UART_MspInit+0x160>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d155      	bne.n	80012a8 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	4a2c      	ldr	r2, [pc, #176]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 8001202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001206:	61d3      	str	r3, [r2, #28]
 8001208:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a26      	ldr	r2, [pc, #152]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b24      	ldr	r3, [pc, #144]	@ (80012b4 <HAL_UART_MspInit+0x158>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800122c:	2304      	movs	r3, #4
 800122e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	4619      	mov	r1, r3
 800123e:	481e      	ldr	r0, [pc, #120]	@ (80012b8 <HAL_UART_MspInit+0x15c>)
 8001240:	f000 fc96 	bl	8001b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001244:	2308      	movs	r3, #8
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4619      	mov	r1, r3
 8001256:	4818      	ldr	r0, [pc, #96]	@ (80012b8 <HAL_UART_MspInit+0x15c>)
 8001258:	f000 fc8a 	bl	8001b70 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 800125e:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <HAL_UART_MspInit+0x168>)
 8001260:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 8001264:	2210      	movs	r2, #16
 8001266:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 8001270:	2280      	movs	r2, #128	@ 0x80
 8001272:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 8001282:	2220      	movs	r2, #32
 8001284:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 800128e:	f000 fa5b 	bl	8001748 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001298:	f7ff fee0 	bl	800105c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 80012a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80012a2:	4a07      	ldr	r2, [pc, #28]	@ (80012c0 <HAL_UART_MspInit+0x164>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010800 	.word	0x40010800
 80012bc:	40004400 	.word	0x40004400
 80012c0:	20000150 	.word	0x20000150
 80012c4:	40020080 	.word	0x40020080

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <NMI_Handler+0x4>

080012d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <UsageFault_Handler+0x4>

080012f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f8c8 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <DMA1_Channel7_IRQHandler+0x10>)
 8001326:	f000 fb1d 	bl	8001964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000150 	.word	0x20000150

08001334 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <TIM1_CC_IRQHandler+0x10>)
 800133a:	f001 fa68 	bl	800280e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000078 	.word	0x20000078

08001348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <USART1_IRQHandler+0x10>)
 800134e:	f001 fecd 	bl	80030ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000c0 	.word	0x200000c0

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	@ (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f002 fc26 	bl	8003bdc <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20002800 	.word	0x20002800
 80013bc:	00000400 	.word	0x00000400
 80013c0:	20000194 	.word	0x20000194
 80013c4:	200002e8 	.word	0x200002e8

080013c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d4:	f7ff fff8 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d8:	480b      	ldr	r0, [pc, #44]	@ (8001408 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013da:	490c      	ldr	r1, [pc, #48]	@ (800140c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001410 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013f0:	4c09      	ldr	r4, [pc, #36]	@ (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fe:	f002 fbf3 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001402:	f7ff fc61 	bl	8000cc8 <main>
  bx lr
 8001406:	4770      	bx	lr
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001410:	080045b4 	.word	0x080045b4
  ldr r2, =_sbss
 8001414:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001418:	200002e4 	.word	0x200002e4

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_Init+0x28>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	@ (8001448 <HAL_Init+0x28>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f947 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe14 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f95f 	bl	800172e <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f927 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_IncTick+0x1c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_IncTick+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a03      	ldr	r2, [pc, #12]	@ (80014cc <HAL_IncTick+0x20>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000198 	.word	0x20000198

080014d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b02      	ldr	r3, [pc, #8]	@ (80014e0 <HAL_GetTick+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000198 	.word	0x20000198

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff fff0 	bl	80014d0 <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffe0 	bl	80014d0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	@ (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4906      	ldr	r1, [pc, #24]	@ (80015c4 <__NVIC_EnableIRQ+0x34>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	@ (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	@ (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff90 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff2d 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff42 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff90 	bl	800161c <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5f 	bl	80015c8 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff35 	bl	8001590 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e043      	b.n	80017e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <HAL_DMA_Init+0xa8>)
 8001766:	4413      	add	r3, r2
 8001768:	4a22      	ldr	r2, [pc, #136]	@ (80017f4 <HAL_DMA_Init+0xac>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	009a      	lsls	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a1f      	ldr	r2, [pc, #124]	@ (80017f8 <HAL_DMA_Init+0xb0>)
 800177a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001792:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001796:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	bffdfff8 	.word	0xbffdfff8
 80017f4:	cccccccd 	.word	0xcccccccd
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d008      	beq.n	8001826 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2204      	movs	r2, #4
 8001818:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e020      	b.n	8001868 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020e 	bic.w	r2, r2, #14
 8001834:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
	...

08001874 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d005      	beq.n	8001898 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2204      	movs	r2, #4
 8001890:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	e051      	b.n	800193c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020e 	bic.w	r2, r2, #14
 80018a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a22      	ldr	r2, [pc, #136]	@ (8001948 <HAL_DMA_Abort_IT+0xd4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d029      	beq.n	8001916 <HAL_DMA_Abort_IT+0xa2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a21      	ldr	r2, [pc, #132]	@ (800194c <HAL_DMA_Abort_IT+0xd8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d022      	beq.n	8001912 <HAL_DMA_Abort_IT+0x9e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001950 <HAL_DMA_Abort_IT+0xdc>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d01a      	beq.n	800190c <HAL_DMA_Abort_IT+0x98>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1e      	ldr	r2, [pc, #120]	@ (8001954 <HAL_DMA_Abort_IT+0xe0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d012      	beq.n	8001906 <HAL_DMA_Abort_IT+0x92>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001958 <HAL_DMA_Abort_IT+0xe4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00a      	beq.n	8001900 <HAL_DMA_Abort_IT+0x8c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1b      	ldr	r2, [pc, #108]	@ (800195c <HAL_DMA_Abort_IT+0xe8>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d102      	bne.n	80018fa <HAL_DMA_Abort_IT+0x86>
 80018f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80018f8:	e00e      	b.n	8001918 <HAL_DMA_Abort_IT+0xa4>
 80018fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018fe:	e00b      	b.n	8001918 <HAL_DMA_Abort_IT+0xa4>
 8001900:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001904:	e008      	b.n	8001918 <HAL_DMA_Abort_IT+0xa4>
 8001906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190a:	e005      	b.n	8001918 <HAL_DMA_Abort_IT+0xa4>
 800190c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001910:	e002      	b.n	8001918 <HAL_DMA_Abort_IT+0xa4>
 8001912:	2310      	movs	r3, #16
 8001914:	e000      	b.n	8001918 <HAL_DMA_Abort_IT+0xa4>
 8001916:	2301      	movs	r3, #1
 8001918:	4a11      	ldr	r2, [pc, #68]	@ (8001960 <HAL_DMA_Abort_IT+0xec>)
 800191a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	4798      	blx	r3
    } 
  }
  return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40020008 	.word	0x40020008
 800194c:	4002001c 	.word	0x4002001c
 8001950:	40020030 	.word	0x40020030
 8001954:	40020044 	.word	0x40020044
 8001958:	40020058 	.word	0x40020058
 800195c:	4002006c 	.word	0x4002006c
 8001960:	40020000 	.word	0x40020000

08001964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	2204      	movs	r2, #4
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d04f      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xc8>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	d04a      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0204 	bic.w	r2, r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a66      	ldr	r2, [pc, #408]	@ (8001b54 <HAL_DMA_IRQHandler+0x1f0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d029      	beq.n	8001a12 <HAL_DMA_IRQHandler+0xae>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a65      	ldr	r2, [pc, #404]	@ (8001b58 <HAL_DMA_IRQHandler+0x1f4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xaa>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a63      	ldr	r2, [pc, #396]	@ (8001b5c <HAL_DMA_IRQHandler+0x1f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0xa4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a62      	ldr	r2, [pc, #392]	@ (8001b60 <HAL_DMA_IRQHandler+0x1fc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d012      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x9e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a60      	ldr	r2, [pc, #384]	@ (8001b64 <HAL_DMA_IRQHandler+0x200>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00a      	beq.n	80019fc <HAL_DMA_IRQHandler+0x98>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001b68 <HAL_DMA_IRQHandler+0x204>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d102      	bne.n	80019f6 <HAL_DMA_IRQHandler+0x92>
 80019f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019f4:	e00e      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 80019f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019fa:	e00b      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 80019fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a00:	e008      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 8001a02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a06:	e005      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 8001a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a0c:	e002      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 8001a0e:	2340      	movs	r3, #64	@ 0x40
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 8001a12:	2304      	movs	r3, #4
 8001a14:	4a55      	ldr	r2, [pc, #340]	@ (8001b6c <HAL_DMA_IRQHandler+0x208>)
 8001a16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8094 	beq.w	8001b4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a2a:	e08e      	b.n	8001b4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	2202      	movs	r2, #2
 8001a32:	409a      	lsls	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d056      	beq.n	8001aea <HAL_DMA_IRQHandler+0x186>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d051      	beq.n	8001aea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10b      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 020a 	bic.w	r2, r2, #10
 8001a62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a38      	ldr	r2, [pc, #224]	@ (8001b54 <HAL_DMA_IRQHandler+0x1f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d029      	beq.n	8001aca <HAL_DMA_IRQHandler+0x166>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a37      	ldr	r2, [pc, #220]	@ (8001b58 <HAL_DMA_IRQHandler+0x1f4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x162>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a35      	ldr	r2, [pc, #212]	@ (8001b5c <HAL_DMA_IRQHandler+0x1f8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01a      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x15c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a34      	ldr	r2, [pc, #208]	@ (8001b60 <HAL_DMA_IRQHandler+0x1fc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d012      	beq.n	8001aba <HAL_DMA_IRQHandler+0x156>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a32      	ldr	r2, [pc, #200]	@ (8001b64 <HAL_DMA_IRQHandler+0x200>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x150>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a31      	ldr	r2, [pc, #196]	@ (8001b68 <HAL_DMA_IRQHandler+0x204>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d102      	bne.n	8001aae <HAL_DMA_IRQHandler+0x14a>
 8001aa8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001aac:	e00e      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ab2:	e00b      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	e008      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001abe:	e005      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001ac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac4:	e002      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	e000      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001aca:	2302      	movs	r3, #2
 8001acc:	4a27      	ldr	r2, [pc, #156]	@ (8001b6c <HAL_DMA_IRQHandler+0x208>)
 8001ace:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d034      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ae8:	e02f      	b.n	8001b4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	2208      	movs	r2, #8
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d028      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x1e8>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d023      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020e 	bic.w	r2, r2, #14
 8001b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	4798      	blx	r3
    }
  }
  return;
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
}
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40020008 	.word	0x40020008
 8001b58:	4002001c 	.word	0x4002001c
 8001b5c:	40020030 	.word	0x40020030
 8001b60:	40020044 	.word	0x40020044
 8001b64:	40020058 	.word	0x40020058
 8001b68:	4002006c 	.word	0x4002006c
 8001b6c:	40020000 	.word	0x40020000

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b08b      	sub	sp, #44	@ 0x2c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e161      	b.n	8001e48 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b84:	2201      	movs	r2, #1
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8150 	bne.w	8001e42 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a97      	ldr	r2, [pc, #604]	@ (8001e04 <HAL_GPIO_Init+0x294>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d05e      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bac:	4a95      	ldr	r2, [pc, #596]	@ (8001e04 <HAL_GPIO_Init+0x294>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d875      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bb2:	4a95      	ldr	r2, [pc, #596]	@ (8001e08 <HAL_GPIO_Init+0x298>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d058      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bb8:	4a93      	ldr	r2, [pc, #588]	@ (8001e08 <HAL_GPIO_Init+0x298>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d86f      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bbe:	4a93      	ldr	r2, [pc, #588]	@ (8001e0c <HAL_GPIO_Init+0x29c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d052      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bc4:	4a91      	ldr	r2, [pc, #580]	@ (8001e0c <HAL_GPIO_Init+0x29c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d869      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bca:	4a91      	ldr	r2, [pc, #580]	@ (8001e10 <HAL_GPIO_Init+0x2a0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04c      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bd0:	4a8f      	ldr	r2, [pc, #572]	@ (8001e10 <HAL_GPIO_Init+0x2a0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d863      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bd6:	4a8f      	ldr	r2, [pc, #572]	@ (8001e14 <HAL_GPIO_Init+0x2a4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d046      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bdc:	4a8d      	ldr	r2, [pc, #564]	@ (8001e14 <HAL_GPIO_Init+0x2a4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d85d      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	d82a      	bhi.n	8001c3c <HAL_GPIO_Init+0xcc>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d859      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bea:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf0 <HAL_GPIO_Init+0x80>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c45 	.word	0x08001c45
 8001bf8:	08001c57 	.word	0x08001c57
 8001bfc:	08001c99 	.word	0x08001c99
 8001c00:	08001c9f 	.word	0x08001c9f
 8001c04:	08001c9f 	.word	0x08001c9f
 8001c08:	08001c9f 	.word	0x08001c9f
 8001c0c:	08001c9f 	.word	0x08001c9f
 8001c10:	08001c9f 	.word	0x08001c9f
 8001c14:	08001c9f 	.word	0x08001c9f
 8001c18:	08001c9f 	.word	0x08001c9f
 8001c1c:	08001c9f 	.word	0x08001c9f
 8001c20:	08001c9f 	.word	0x08001c9f
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c9f 	.word	0x08001c9f
 8001c2c:	08001c9f 	.word	0x08001c9f
 8001c30:	08001c9f 	.word	0x08001c9f
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	4a76      	ldr	r2, [pc, #472]	@ (8001e18 <HAL_GPIO_Init+0x2a8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c42:	e02c      	b.n	8001c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e029      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e024      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e01f      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	330c      	adds	r3, #12
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e01a      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c72:	2304      	movs	r3, #4
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e013      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c80:	2308      	movs	r3, #8
 8001c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	611a      	str	r2, [r3, #16]
          break;
 8001c8a:	e009      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	615a      	str	r2, [r3, #20]
          break;
 8001c96:	e003      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          break;
 8001c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	@ 0xff
 8001ca4:	d801      	bhi.n	8001caa <HAL_GPIO_Init+0x13a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_Init+0x13e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2bff      	cmp	r3, #255	@ 0xff
 8001cb4:	d802      	bhi.n	8001cbc <HAL_GPIO_Init+0x14c>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x152>
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	3b08      	subs	r3, #8
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	210f      	movs	r1, #15
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	6a39      	ldr	r1, [r7, #32]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80a9 	beq.w	8001e42 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a49      	ldr	r2, [pc, #292]	@ (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b47      	ldr	r3, [pc, #284]	@ (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d08:	4a45      	ldr	r2, [pc, #276]	@ (8001e20 <HAL_GPIO_Init+0x2b0>)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e24 <HAL_GPIO_Init+0x2b4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00d      	beq.n	8001d50 <HAL_GPIO_Init+0x1e0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3c      	ldr	r2, [pc, #240]	@ (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d007      	beq.n	8001d4c <HAL_GPIO_Init+0x1dc>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e2c <HAL_GPIO_Init+0x2bc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_GPIO_Init+0x1d8>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e004      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d50:	2300      	movs	r3, #0
 8001d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d62:	492f      	ldr	r1, [pc, #188]	@ (8001e20 <HAL_GPIO_Init+0x2b0>)
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	492b      	ldr	r1, [pc, #172]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4927      	ldr	r1, [pc, #156]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da4:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	4921      	ldr	r1, [pc, #132]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	491d      	ldr	r1, [pc, #116]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dcc:	4b18      	ldr	r3, [pc, #96]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4917      	ldr	r1, [pc, #92]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dda:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4913      	ldr	r1, [pc, #76]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01f      	beq.n	8001e34 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001df4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	490d      	ldr	r1, [pc, #52]	@ (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e01f      	b.n	8001e42 <HAL_GPIO_Init+0x2d2>
 8001e02:	bf00      	nop
 8001e04:	10320000 	.word	0x10320000
 8001e08:	10310000 	.word	0x10310000
 8001e0c:	10220000 	.word	0x10220000
 8001e10:	10210000 	.word	0x10210000
 8001e14:	10120000 	.word	0x10120000
 8001e18:	10110000 	.word	0x10110000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_GPIO_Init+0x2f4>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4909      	ldr	r1, [pc, #36]	@ (8001e64 <HAL_GPIO_Init+0x2f4>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f47f ae96 	bne.w	8001b84 <HAL_GPIO_Init+0x14>
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	372c      	adds	r7, #44	@ 0x2c
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	807b      	strh	r3, [r7, #2]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea6:	787b      	ldrb	r3, [r7, #1]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eac:	887a      	ldrh	r2, [r7, #2]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eb2:	e003      	b.n	8001ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	041a      	lsls	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	611a      	str	r2, [r3, #16]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e272      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee8:	4b92      	ldr	r3, [pc, #584]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d00c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d112      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
 8001f00:	4b8c      	ldr	r3, [pc, #560]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0c:	d10b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0e:	4b89      	ldr	r3, [pc, #548]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d06c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d168      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e24c      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x76>
 8001f30:	4b80      	ldr	r3, [pc, #512]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a7f      	ldr	r2, [pc, #508]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e02e      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x98>
 8001f46:	4b7b      	ldr	r3, [pc, #492]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a7a      	ldr	r2, [pc, #488]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b78      	ldr	r3, [pc, #480]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a77      	ldr	r2, [pc, #476]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0xbc>
 8001f6a:	4b72      	ldr	r3, [pc, #456]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a71      	ldr	r2, [pc, #452]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b6f      	ldr	r3, [pc, #444]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f84:	4b6b      	ldr	r3, [pc, #428]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a6a      	ldr	r2, [pc, #424]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b68      	ldr	r3, [pc, #416]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a67      	ldr	r2, [pc, #412]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fa94 	bl	80014d0 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff fa90 	bl	80014d0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	@ 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e200      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xe4>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fa80 	bl	80014d0 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff fa7c 	bl	80014d0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	@ 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1ec      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b53      	ldr	r3, [pc, #332]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x10c>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d063      	beq.n	80020ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002002:	4b4c      	ldr	r3, [pc, #304]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800200e:	4b49      	ldr	r3, [pc, #292]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11c      	bne.n	8002054 <HAL_RCC_OscConfig+0x18c>
 800201a:	4b46      	ldr	r3, [pc, #280]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	4b43      	ldr	r3, [pc, #268]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1c0      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b3d      	ldr	r3, [pc, #244]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4939      	ldr	r1, [pc, #228]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	e03a      	b.n	80020ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b36      	ldr	r3, [pc, #216]	@ (8002138 <HAL_RCC_OscConfig+0x270>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7ff fa35 	bl	80014d0 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7ff fa31 	bl	80014d0 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1a1      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	4b2d      	ldr	r3, [pc, #180]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b2a      	ldr	r3, [pc, #168]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4927      	ldr	r1, [pc, #156]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b26      	ldr	r3, [pc, #152]	@ (8002138 <HAL_RCC_OscConfig+0x270>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fa14 	bl	80014d0 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ac:	f7ff fa10 	bl	80014d0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e180      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d03a      	beq.n	800214c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d019      	beq.n	8002112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	4b17      	ldr	r3, [pc, #92]	@ (800213c <HAL_RCC_OscConfig+0x274>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7ff f9f4 	bl	80014d0 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7ff f9f0 	bl	80014d0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e160      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <HAL_RCC_OscConfig+0x26c>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800210a:	2001      	movs	r0, #1
 800210c:	f000 face 	bl	80026ac <RCC_Delay>
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_RCC_OscConfig+0x274>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002118:	f7ff f9da 	bl	80014d0 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211e:	e00f      	b.n	8002140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002120:	f7ff f9d6 	bl	80014d0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d908      	bls.n	8002140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e146      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	42420000 	.word	0x42420000
 800213c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b92      	ldr	r3, [pc, #584]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e9      	bne.n	8002120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a6 	beq.w	80022a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215e:	4b8b      	ldr	r3, [pc, #556]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10d      	bne.n	8002186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b88      	ldr	r3, [pc, #544]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a87      	ldr	r2, [pc, #540]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b85      	ldr	r3, [pc, #532]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	4b82      	ldr	r3, [pc, #520]	@ (8002390 <HAL_RCC_OscConfig+0x4c8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002192:	4b7f      	ldr	r3, [pc, #508]	@ (8002390 <HAL_RCC_OscConfig+0x4c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a7e      	ldr	r2, [pc, #504]	@ (8002390 <HAL_RCC_OscConfig+0x4c8>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219e:	f7ff f997 	bl	80014d0 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a6:	f7ff f993 	bl	80014d0 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b64      	cmp	r3, #100	@ 0x64
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e103      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b8:	4b75      	ldr	r3, [pc, #468]	@ (8002390 <HAL_RCC_OscConfig+0x4c8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x312>
 80021cc:	4b6f      	ldr	r3, [pc, #444]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a6e      	ldr	r2, [pc, #440]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	e02d      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x334>
 80021e2:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a69      	ldr	r2, [pc, #420]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	4b67      	ldr	r3, [pc, #412]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a66      	ldr	r2, [pc, #408]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	e01c      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d10c      	bne.n	800221e <HAL_RCC_OscConfig+0x356>
 8002204:	4b61      	ldr	r3, [pc, #388]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a60      	ldr	r2, [pc, #384]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	4b5e      	ldr	r3, [pc, #376]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a5d      	ldr	r2, [pc, #372]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e00b      	b.n	8002236 <HAL_RCC_OscConfig+0x36e>
 800221e:	4b5b      	ldr	r3, [pc, #364]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a5a      	ldr	r2, [pc, #360]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	4b58      	ldr	r3, [pc, #352]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a57      	ldr	r2, [pc, #348]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d015      	beq.n	800226a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7ff f947 	bl	80014d0 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7ff f943 	bl	80014d0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0b1      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ee      	beq.n	8002246 <HAL_RCC_OscConfig+0x37e>
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff f931 	bl	80014d0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	e00a      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002272:	f7ff f92d 	bl	80014d0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002280:	4293      	cmp	r3, r2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e09b      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	4b40      	ldr	r3, [pc, #256]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1ee      	bne.n	8002272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b3c      	ldr	r3, [pc, #240]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	4a3b      	ldr	r2, [pc, #236]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8087 	beq.w	80023be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b0:	4b36      	ldr	r3, [pc, #216]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d061      	beq.n	8002380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d146      	bne.n	8002352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7ff f901 	bl	80014d0 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7ff f8fd 	bl	80014d0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e06d      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e4:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f8:	d108      	bne.n	800230c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4921      	ldr	r1, [pc, #132]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b1f      	ldr	r3, [pc, #124]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a19      	ldr	r1, [r3, #32]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	430b      	orrs	r3, r1
 800231e:	491b      	ldr	r1, [pc, #108]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <HAL_RCC_OscConfig+0x4cc>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff f8d1 	bl	80014d0 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff f8cd 	bl	80014d0 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e03d      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x46a>
 8002350:	e035      	b.n	80023be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_RCC_OscConfig+0x4cc>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7ff f8ba 	bl	80014d0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7ff f8b6 	bl	80014d0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e026      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_RCC_OscConfig+0x4c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x498>
 800237e:	e01e      	b.n	80023be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e019      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
 8002394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_RCC_OscConfig+0x500>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0d0      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b6a      	ldr	r3, [pc, #424]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d910      	bls.n	8002410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b67      	ldr	r3, [pc, #412]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0207 	bic.w	r2, r3, #7
 80023f6:	4965      	ldr	r1, [pc, #404]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b63      	ldr	r3, [pc, #396]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0b8      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002428:	4b59      	ldr	r3, [pc, #356]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a58      	ldr	r2, [pc, #352]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002440:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a52      	ldr	r2, [pc, #328]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800244a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b50      	ldr	r3, [pc, #320]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	494d      	ldr	r1, [pc, #308]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d040      	beq.n	80024ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d115      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e07f      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248a:	4b41      	ldr	r3, [pc, #260]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e073      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06b      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024aa:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f023 0203 	bic.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4936      	ldr	r1, [pc, #216]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024bc:	f7ff f808 	bl	80014d0 <HAL_GetTick>
 80024c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	e00a      	b.n	80024da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c4:	f7ff f804 	bl	80014d0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e053      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 020c 	and.w	r2, r3, #12
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d1eb      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d210      	bcs.n	800251c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b24      	ldr	r3, [pc, #144]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	4922      	ldr	r1, [pc, #136]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e032      	b.n	8002582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4916      	ldr	r1, [pc, #88]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002546:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	490e      	ldr	r1, [pc, #56]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255a:	f000 f821 	bl	80025a0 <HAL_RCC_GetSysClockFreq>
 800255e:	4602      	mov	r2, r0
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	490a      	ldr	r1, [pc, #40]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800256c:	5ccb      	ldrb	r3, [r1, r3]
 800256e:	fa22 f303 	lsr.w	r3, r2, r3
 8002572:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <HAL_RCC_ClockConfig+0x1cc>)
 8002574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002576:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_RCC_ClockConfig+0x1d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe ff66 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40022000 	.word	0x40022000
 8002590:	40021000 	.word	0x40021000
 8002594:	08004544 	.word	0x08004544
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004

080025a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x94>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d002      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x36>
 80025ce:	e027      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x98>)
 80025d2:	613b      	str	r3, [r7, #16]
      break;
 80025d4:	e027      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d010      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x94>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	0c5b      	lsrs	r3, r3, #17
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	4a11      	ldr	r2, [pc, #68]	@ (8002640 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x98>)
 8002602:	fb03 f202 	mul.w	r2, r3, r2
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e004      	b.n	800261a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a0c      	ldr	r2, [pc, #48]	@ (8002644 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	613b      	str	r3, [r7, #16]
      break;
 800261e:	e002      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x98>)
 8002622:	613b      	str	r3, [r7, #16]
      break;
 8002624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002626:	693b      	ldr	r3, [r7, #16]
}
 8002628:	4618      	mov	r0, r3
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	007a1200 	.word	0x007a1200
 800263c:	0800455c 	.word	0x0800455c
 8002640:	0800456c 	.word	0x0800456c
 8002644:	003d0900 	.word	0x003d0900

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b02      	ldr	r3, [pc, #8]	@ (8002658 <HAL_RCC_GetHCLKFreq+0x10>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	20000000 	.word	0x20000000

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002660:	f7ff fff2 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4903      	ldr	r1, [pc, #12]	@ (8002680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	08004554 	.word	0x08004554

08002684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002688:	f7ff ffde 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0adb      	lsrs	r3, r3, #11
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4903      	ldr	r1, [pc, #12]	@ (80026a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08004554 	.word	0x08004554

080026ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026b4:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <RCC_Delay+0x34>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <RCC_Delay+0x38>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a5b      	lsrs	r3, r3, #9
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c8:	bf00      	nop
  }
  while (Delay --);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	60fa      	str	r2, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f9      	bne.n	80026c8 <RCC_Delay+0x1c>
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000000 	.word	0x20000000
 80026e4:	10624dd3 	.word	0x10624dd3

080026e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d001      	beq.n	8002700 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e02d      	b.n	800275c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a16      	ldr	r2, [pc, #88]	@ (8002768 <HAL_TIM_Base_Start+0x80>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_TIM_Base_Start+0x3e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271a:	d004      	beq.n	8002726 <HAL_TIM_Base_Start+0x3e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a12      	ldr	r2, [pc, #72]	@ (800276c <HAL_TIM_Base_Start+0x84>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b06      	cmp	r3, #6
 8002736:	d010      	beq.n	800275a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	e007      	b.n	800275a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40000400 	.word	0x40000400

08002770 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e041      	b.n	8002806 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fc98 	bl	80010cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3304      	adds	r3, #4
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f000 f9fe 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d122      	bne.n	800286a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d11b      	bne.n	800286a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f06f 0202 	mvn.w	r2, #2
 800283a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f992 	bl	8002b7a <HAL_TIM_IC_CaptureCallback>
 8002856:	e005      	b.n	8002864 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f985 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f994 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d122      	bne.n	80028be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d11b      	bne.n	80028be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f06f 0204 	mvn.w	r2, #4
 800288e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f968 	bl	8002b7a <HAL_TIM_IC_CaptureCallback>
 80028aa:	e005      	b.n	80028b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f95b 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f96a 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d122      	bne.n	8002912 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d11b      	bne.n	8002912 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f06f 0208 	mvn.w	r2, #8
 80028e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2204      	movs	r2, #4
 80028e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f93e 	bl	8002b7a <HAL_TIM_IC_CaptureCallback>
 80028fe:	e005      	b.n	800290c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f931 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f940 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d122      	bne.n	8002966 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b10      	cmp	r3, #16
 800292c:	d11b      	bne.n	8002966 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f06f 0210 	mvn.w	r2, #16
 8002936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2208      	movs	r2, #8
 800293c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f914 	bl	8002b7a <HAL_TIM_IC_CaptureCallback>
 8002952:	e005      	b.n	8002960 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f907 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f916 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d10e      	bne.n	8002992 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f06f 0201 	mvn.w	r2, #1
 800298a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f8e2 	bl	8002b56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299c:	2b80      	cmp	r3, #128	@ 0x80
 800299e:	d10e      	bne.n	80029be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029aa:	2b80      	cmp	r3, #128	@ 0x80
 80029ac:	d107      	bne.n	80029be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 faba 	bl	8002f32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c8:	2b40      	cmp	r3, #64	@ 0x40
 80029ca:	d10e      	bne.n	80029ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d6:	2b40      	cmp	r3, #64	@ 0x40
 80029d8:	d107      	bne.n	80029ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8da 	bl	8002b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d10e      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d107      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f06f 0220 	mvn.w	r2, #32
 8002a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa85 	bl	8002f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e088      	b.n	8002b4e <HAL_TIM_IC_ConfigChannel+0x130>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11b      	bne.n	8002a82 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002a5a:	f000 f901 	bl	8002c60 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 020c 	bic.w	r2, r2, #12
 8002a6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6999      	ldr	r1, [r3, #24]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	619a      	str	r2, [r3, #24]
 8002a80:	e060      	b.n	8002b44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d11c      	bne.n	8002ac2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002a98:	f000 f936 	bl	8002d08 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002aaa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6999      	ldr	r1, [r3, #24]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	021a      	lsls	r2, r3, #8
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	619a      	str	r2, [r3, #24]
 8002ac0:	e040      	b.n	8002b44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002ad8:	f000 f952 	bl	8002d80 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 020c 	bic.w	r2, r2, #12
 8002aea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69d9      	ldr	r1, [r3, #28]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	61da      	str	r2, [r3, #28]
 8002afe:	e021      	b.n	8002b44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d11c      	bne.n	8002b40 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b16:	f000 f96e 	bl	8002df6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69d9      	ldr	r1, [r3, #28]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	021a      	lsls	r2, r3, #8
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	61da      	str	r2, [r3, #28]
 8002b3e:	e001      	b.n	8002b44 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a25      	ldr	r2, [pc, #148]	@ (8002c58 <TIM_Base_SetConfig+0xa8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <TIM_Base_SetConfig+0x28>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bce:	d003      	beq.n	8002bd8 <TIM_Base_SetConfig+0x28>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <TIM_Base_SetConfig+0xac>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d108      	bne.n	8002bea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	@ (8002c58 <TIM_Base_SetConfig+0xa8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x52>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x52>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <TIM_Base_SetConfig+0xac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a07      	ldr	r2, [pc, #28]	@ (8002c58 <TIM_Base_SetConfig+0xa8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d103      	bne.n	8002c48 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400

08002c60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f023 0201 	bic.w	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a1d      	ldr	r2, [pc, #116]	@ (8002d00 <TIM_TI1_SetConfig+0xa0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <TIM_TI1_SetConfig+0x3e>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c94:	d003      	beq.n	8002c9e <TIM_TI1_SetConfig+0x3e>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a1a      	ldr	r2, [pc, #104]	@ (8002d04 <TIM_TI1_SetConfig+0xa4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <TIM_TI1_SetConfig+0x42>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <TIM_TI1_SetConfig+0x44>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e003      	b.n	8002cc2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f023 030a 	bic.w	r3, r3, #10
 8002cdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f003 030a 	and.w	r3, r3, #10
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400

08002d08 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 0210 	bic.w	r2, r3, #16
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	031b      	lsls	r3, r3, #12
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002d5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f023 0303 	bic.w	r3, r3, #3
 8002dac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	621a      	str	r2, [r3, #32]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b087      	sub	sp, #28
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	031b      	lsls	r3, r3, #12
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e48:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	031b      	lsls	r3, r3, #12
 8002e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	621a      	str	r2, [r3, #32]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e041      	b.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a14      	ldr	r2, [pc, #80]	@ (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed4:	d004      	beq.n	8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a10      	ldr	r2, [pc, #64]	@ (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d10c      	bne.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40000400 	.word	0x40000400

08002f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e042      	b.n	8002fdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fe f8f6 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	@ 0x24
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fd71 	bl	8003a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	@ 0x28
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b20      	cmp	r3, #32
 8003002:	d16d      	bne.n	80030e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_UART_Transmit+0x2c>
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e066      	b.n	80030e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2221      	movs	r2, #33	@ 0x21
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003022:	f7fe fa55 	bl	80014d0 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303c:	d108      	bne.n	8003050 <HAL_UART_Transmit+0x6c>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	e003      	b.n	8003058 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003058:	e02a      	b.n	80030b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2200      	movs	r2, #0
 8003062:	2180      	movs	r1, #128	@ 0x80
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 faf9 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e036      	b.n	80030e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10b      	bne.n	8003092 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3302      	adds	r3, #2
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e007      	b.n	80030a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	3301      	adds	r3, #1
 80030a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1cf      	bne.n	800305a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2140      	movs	r1, #64	@ 0x40
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fac9 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e006      	b.n	80030e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b0ba      	sub	sp, #232	@ 0xe8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800312a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10f      	bne.n	8003152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_UART_IRQHandler+0x66>
 800313e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fbd1 	bl	80038f2 <UART_Receive_IT>
      return;
 8003150:	e25b      	b.n	800360a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80de 	beq.w	8003318 <HAL_UART_IRQHandler+0x22c>
 800315c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800316c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80d1 	beq.w	8003318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00b      	beq.n	800319a <HAL_UART_IRQHandler+0xae>
 8003182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_UART_IRQHandler+0xd2>
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f043 0202 	orr.w	r2, r3, #2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_UART_IRQHandler+0xf6>
 80031ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f043 0204 	orr.w	r2, r3, #4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d011      	beq.n	8003212 <HAL_UART_IRQHandler+0x126>
 80031ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d105      	bne.n	8003206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	f043 0208 	orr.w	r2, r3, #8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 81f2 	beq.w	8003600 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800321c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_UART_IRQHandler+0x14e>
 8003228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fb5c 	bl	80038f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_UART_IRQHandler+0x17a>
 800325e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04f      	beq.n	8003306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fa66 	bl	8003738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d041      	beq.n	80032fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3314      	adds	r3, #20
 8003280:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3314      	adds	r3, #20
 80032a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1d9      	bne.n	800327a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d013      	beq.n	80032f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	4a7e      	ldr	r2, [pc, #504]	@ (80034cc <HAL_UART_IRQHandler+0x3e0>)
 80032d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe faca 	bl	8001874 <HAL_DMA_Abort_IT>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032f0:	4610      	mov	r0, r2
 80032f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e00e      	b.n	8003314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f99c 	bl	8003634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e00a      	b.n	8003314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f998 	bl	8003634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	e006      	b.n	8003314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f994 	bl	8003634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003312:	e175      	b.n	8003600 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	bf00      	nop
    return;
 8003316:	e173      	b.n	8003600 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	2b01      	cmp	r3, #1
 800331e:	f040 814f 	bne.w	80035c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8148 	beq.w	80035c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8141 	beq.w	80035c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80b6 	beq.w	80034d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8145 	beq.w	8003604 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800337e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003382:	429a      	cmp	r2, r3
 8003384:	f080 813e 	bcs.w	8003604 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800338e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b20      	cmp	r3, #32
 8003398:	f000 8088 	beq.w	80034ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1d9      	bne.n	800339c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800340c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003410:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003414:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800341e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e1      	bne.n	80033e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3314      	adds	r3, #20
 800342a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003434:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800343a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3314      	adds	r3, #20
 8003444:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003448:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800344a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800344e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e3      	bne.n	8003424 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800347a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800347c:	f023 0310 	bic.w	r3, r3, #16
 8003480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800348e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003490:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800349c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e3      	bne.n	800346a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe f9a8 	bl	80017fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8bf 	bl	8003646 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034c8:	e09c      	b.n	8003604 <HAL_UART_IRQHandler+0x518>
 80034ca:	bf00      	nop
 80034cc:	080037fd 	.word	0x080037fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 808e 	beq.w	8003608 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8089 	beq.w	8003608 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800350c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800351a:	647a      	str	r2, [r7, #68]	@ 0x44
 800351c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003520:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e3      	bne.n	80034f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3314      	adds	r3, #20
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	623b      	str	r3, [r7, #32]
   return(result);
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3314      	adds	r3, #20
 800354e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003552:	633a      	str	r2, [r7, #48]	@ 0x30
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e3      	bne.n	800352e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	60fb      	str	r3, [r7, #12]
   return(result);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0310 	bic.w	r3, r3, #16
 800358a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003598:	61fa      	str	r2, [r7, #28]
 800359a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359c:	69b9      	ldr	r1, [r7, #24]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	e841 2300 	strex	r3, r2, [r1]
 80035a4:	617b      	str	r3, [r7, #20]
   return(result);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e3      	bne.n	8003574 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f844 	bl	8003646 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035be:	e023      	b.n	8003608 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <HAL_UART_IRQHandler+0x4f4>
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f923 	bl	8003824 <UART_Transmit_IT>
    return;
 80035de:	e014      	b.n	800360a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_UART_IRQHandler+0x51e>
 80035ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f962 	bl	80038c2 <UART_EndTransmit_IT>
    return;
 80035fe:	e004      	b.n	800360a <HAL_UART_IRQHandler+0x51e>
    return;
 8003600:	bf00      	nop
 8003602:	e002      	b.n	800360a <HAL_UART_IRQHandler+0x51e>
      return;
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <HAL_UART_IRQHandler+0x51e>
      return;
 8003608:	bf00      	nop
  }
}
 800360a:	37e8      	adds	r7, #232	@ 0xe8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b090      	sub	sp, #64	@ 0x40
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366c:	e050      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d04c      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <UART_WaitOnFlagUntilTimeout+0x30>
 800367c:	f7fd ff28 	bl	80014d0 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003688:	429a      	cmp	r2, r3
 800368a:	d241      	bcs.n	8003710 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80036a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80036ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80036ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e5      	bne.n	800368c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3314      	adds	r3, #20
 80036c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	e853 3f00 	ldrex	r3, [r3]
 80036ce:	613b      	str	r3, [r7, #16]
   return(result);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3314      	adds	r3, #20
 80036de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036e0:	623a      	str	r2, [r7, #32]
 80036e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	69f9      	ldr	r1, [r7, #28]
 80036e6:	6a3a      	ldr	r2, [r7, #32]
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e5      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e00f      	b.n	8003730 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	429a      	cmp	r2, r3
 800372c:	d09f      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3740      	adds	r7, #64	@ 0x40
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b095      	sub	sp, #84	@ 0x54
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003760:	643a      	str	r2, [r7, #64]	@ 0x40
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	61fb      	str	r3, [r7, #28]
   return(result);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3314      	adds	r3, #20
 8003792:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003794:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800379a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d119      	bne.n	80037e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	60bb      	str	r3, [r7, #8]
   return(result);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f023 0310 	bic.w	r3, r3, #16
 80037c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037d0:	61ba      	str	r2, [r7, #24]
 80037d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	613b      	str	r3, [r7, #16]
   return(result);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037f2:	bf00      	nop
 80037f4:	3754      	adds	r7, #84	@ 0x54
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff ff0c 	bl	8003634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b21      	cmp	r3, #33	@ 0x21
 8003836:	d13e      	bne.n	80038b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003840:	d114      	bne.n	800386c <UART_Transmit_IT+0x48>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d110      	bne.n	800386c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800385e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	621a      	str	r2, [r3, #32]
 800386a:	e008      	b.n	800387e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	1c59      	adds	r1, r3, #1
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6211      	str	r1, [r2, #32]
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4619      	mov	r1, r3
 800388c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10f      	bne.n	80038b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fe94 	bl	8003610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08c      	sub	sp, #48	@ 0x30
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b22      	cmp	r3, #34	@ 0x22
 8003904:	f040 80ae 	bne.w	8003a64 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003910:	d117      	bne.n	8003942 <UART_Receive_IT+0x50>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d113      	bne.n	8003942 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003922:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	b29b      	uxth	r3, r3
 800392c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003930:	b29a      	uxth	r2, r3
 8003932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003934:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003940:	e026      	b.n	8003990 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003946:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003954:	d007      	beq.n	8003966 <UART_Receive_IT+0x74>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <UART_Receive_IT+0x82>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e008      	b.n	8003986 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003980:	b2da      	uxtb	r2, r3
 8003982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003984:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4619      	mov	r1, r3
 800399e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d15d      	bne.n	8003a60 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0220 	bic.w	r2, r2, #32
 80039b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d135      	bne.n	8003a56 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f023 0310 	bic.w	r3, r3, #16
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	623a      	str	r2, [r7, #32]
 8003a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	69f9      	ldr	r1, [r7, #28]
 8003a16:	6a3a      	ldr	r2, [r7, #32]
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e5      	bne.n	80039f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d10a      	bne.n	8003a48 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fdf9 	bl	8003646 <HAL_UARTEx_RxEventCallback>
 8003a54:	e002      	b.n	8003a5c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fde3 	bl	8003622 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e002      	b.n	8003a66 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3730      	adds	r7, #48	@ 0x30
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003aaa:	f023 030c 	bic.w	r3, r3, #12
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b84 <UART_SetConfig+0x114>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7fe fdd4 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	e002      	b.n	8003ae6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7fe fdbc 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003ae4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009a      	lsls	r2, r3, #2
 8003af0:	441a      	add	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <UART_SetConfig+0x118>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	0119      	lsls	r1, r3, #4
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b88 <UART_SetConfig+0x118>)
 8003b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2064      	movs	r0, #100	@ 0x64
 8003b26:	fb00 f303 	mul.w	r3, r0, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	@ 0x32
 8003b30:	4a15      	ldr	r2, [pc, #84]	@ (8003b88 <UART_SetConfig+0x118>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b3c:	4419      	add	r1, r3
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009a      	lsls	r2, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b54:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <UART_SetConfig+0x118>)
 8003b56:	fba3 0302 	umull	r0, r3, r3, r2
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2064      	movs	r0, #100	@ 0x64
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	3332      	adds	r3, #50	@ 0x32
 8003b68:	4a07      	ldr	r2, [pc, #28]	@ (8003b88 <UART_SetConfig+0x118>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	f003 020f 	and.w	r2, r3, #15
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	440a      	add	r2, r1
 8003b7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40013800 	.word	0x40013800
 8003b88:	51eb851f 	.word	0x51eb851f

08003b8c <siprintf>:
 8003b8c:	b40e      	push	{r1, r2, r3}
 8003b8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b92:	b500      	push	{lr}
 8003b94:	b09c      	sub	sp, #112	@ 0x70
 8003b96:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b98:	9002      	str	r0, [sp, #8]
 8003b9a:	9006      	str	r0, [sp, #24]
 8003b9c:	9107      	str	r1, [sp, #28]
 8003b9e:	9104      	str	r1, [sp, #16]
 8003ba0:	4808      	ldr	r0, [pc, #32]	@ (8003bc4 <siprintf+0x38>)
 8003ba2:	4909      	ldr	r1, [pc, #36]	@ (8003bc8 <siprintf+0x3c>)
 8003ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ba8:	9105      	str	r1, [sp, #20]
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	a902      	add	r1, sp, #8
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	f000 f992 	bl	8003ed8 <_svfiprintf_r>
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	9b02      	ldr	r3, [sp, #8]
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	b01c      	add	sp, #112	@ 0x70
 8003bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bc0:	b003      	add	sp, #12
 8003bc2:	4770      	bx	lr
 8003bc4:	2000000c 	.word	0x2000000c
 8003bc8:	ffff0208 	.word	0xffff0208

08003bcc <memset>:
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4402      	add	r2, r0
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d100      	bne.n	8003bd6 <memset+0xa>
 8003bd4:	4770      	bx	lr
 8003bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bda:	e7f9      	b.n	8003bd0 <memset+0x4>

08003bdc <__errno>:
 8003bdc:	4b01      	ldr	r3, [pc, #4]	@ (8003be4 <__errno+0x8>)
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	2000000c 	.word	0x2000000c

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	2600      	movs	r6, #0
 8003bec:	4d0c      	ldr	r5, [pc, #48]	@ (8003c20 <__libc_init_array+0x38>)
 8003bee:	4c0d      	ldr	r4, [pc, #52]	@ (8003c24 <__libc_init_array+0x3c>)
 8003bf0:	1b64      	subs	r4, r4, r5
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	42a6      	cmp	r6, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	f000 fc78 	bl	80044ec <_init>
 8003bfc:	2600      	movs	r6, #0
 8003bfe:	4d0a      	ldr	r5, [pc, #40]	@ (8003c28 <__libc_init_array+0x40>)
 8003c00:	4c0a      	ldr	r4, [pc, #40]	@ (8003c2c <__libc_init_array+0x44>)
 8003c02:	1b64      	subs	r4, r4, r5
 8003c04:	10a4      	asrs	r4, r4, #2
 8003c06:	42a6      	cmp	r6, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c10:	4798      	blx	r3
 8003c12:	3601      	adds	r6, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1a:	4798      	blx	r3
 8003c1c:	3601      	adds	r6, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	080045ac 	.word	0x080045ac
 8003c24:	080045ac 	.word	0x080045ac
 8003c28:	080045ac 	.word	0x080045ac
 8003c2c:	080045b0 	.word	0x080045b0

08003c30 <__retarget_lock_acquire_recursive>:
 8003c30:	4770      	bx	lr

08003c32 <__retarget_lock_release_recursive>:
 8003c32:	4770      	bx	lr

08003c34 <_free_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4605      	mov	r5, r0
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	d040      	beq.n	8003cbe <_free_r+0x8a>
 8003c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c40:	1f0c      	subs	r4, r1, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bfb8      	it	lt
 8003c46:	18e4      	addlt	r4, r4, r3
 8003c48:	f000 f8de 	bl	8003e08 <__malloc_lock>
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc0 <_free_r+0x8c>)
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	b933      	cbnz	r3, 8003c60 <_free_r+0x2c>
 8003c52:	6063      	str	r3, [r4, #4]
 8003c54:	6014      	str	r4, [r2, #0]
 8003c56:	4628      	mov	r0, r5
 8003c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c5c:	f000 b8da 	b.w	8003e14 <__malloc_unlock>
 8003c60:	42a3      	cmp	r3, r4
 8003c62:	d908      	bls.n	8003c76 <_free_r+0x42>
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	1821      	adds	r1, r4, r0
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	bf01      	itttt	eq
 8003c6c:	6819      	ldreq	r1, [r3, #0]
 8003c6e:	685b      	ldreq	r3, [r3, #4]
 8003c70:	1809      	addeq	r1, r1, r0
 8003c72:	6021      	streq	r1, [r4, #0]
 8003c74:	e7ed      	b.n	8003c52 <_free_r+0x1e>
 8003c76:	461a      	mov	r2, r3
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	b10b      	cbz	r3, 8003c80 <_free_r+0x4c>
 8003c7c:	42a3      	cmp	r3, r4
 8003c7e:	d9fa      	bls.n	8003c76 <_free_r+0x42>
 8003c80:	6811      	ldr	r1, [r2, #0]
 8003c82:	1850      	adds	r0, r2, r1
 8003c84:	42a0      	cmp	r0, r4
 8003c86:	d10b      	bne.n	8003ca0 <_free_r+0x6c>
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	4401      	add	r1, r0
 8003c8c:	1850      	adds	r0, r2, r1
 8003c8e:	4283      	cmp	r3, r0
 8003c90:	6011      	str	r1, [r2, #0]
 8003c92:	d1e0      	bne.n	8003c56 <_free_r+0x22>
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4408      	add	r0, r1
 8003c9a:	6010      	str	r0, [r2, #0]
 8003c9c:	6053      	str	r3, [r2, #4]
 8003c9e:	e7da      	b.n	8003c56 <_free_r+0x22>
 8003ca0:	d902      	bls.n	8003ca8 <_free_r+0x74>
 8003ca2:	230c      	movs	r3, #12
 8003ca4:	602b      	str	r3, [r5, #0]
 8003ca6:	e7d6      	b.n	8003c56 <_free_r+0x22>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	1821      	adds	r1, r4, r0
 8003cac:	428b      	cmp	r3, r1
 8003cae:	bf01      	itttt	eq
 8003cb0:	6819      	ldreq	r1, [r3, #0]
 8003cb2:	685b      	ldreq	r3, [r3, #4]
 8003cb4:	1809      	addeq	r1, r1, r0
 8003cb6:	6021      	streq	r1, [r4, #0]
 8003cb8:	6063      	str	r3, [r4, #4]
 8003cba:	6054      	str	r4, [r2, #4]
 8003cbc:	e7cb      	b.n	8003c56 <_free_r+0x22>
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	200002e0 	.word	0x200002e0

08003cc4 <sbrk_aligned>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8003d04 <sbrk_aligned+0x40>)
 8003cc8:	460c      	mov	r4, r1
 8003cca:	6831      	ldr	r1, [r6, #0]
 8003ccc:	4605      	mov	r5, r0
 8003cce:	b911      	cbnz	r1, 8003cd6 <sbrk_aligned+0x12>
 8003cd0:	f000 fbaa 	bl	8004428 <_sbrk_r>
 8003cd4:	6030      	str	r0, [r6, #0]
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f000 fba5 	bl	8004428 <_sbrk_r>
 8003cde:	1c43      	adds	r3, r0, #1
 8003ce0:	d103      	bne.n	8003cea <sbrk_aligned+0x26>
 8003ce2:	f04f 34ff 	mov.w	r4, #4294967295
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	1cc4      	adds	r4, r0, #3
 8003cec:	f024 0403 	bic.w	r4, r4, #3
 8003cf0:	42a0      	cmp	r0, r4
 8003cf2:	d0f8      	beq.n	8003ce6 <sbrk_aligned+0x22>
 8003cf4:	1a21      	subs	r1, r4, r0
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f000 fb96 	bl	8004428 <_sbrk_r>
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d1f2      	bne.n	8003ce6 <sbrk_aligned+0x22>
 8003d00:	e7ef      	b.n	8003ce2 <sbrk_aligned+0x1e>
 8003d02:	bf00      	nop
 8003d04:	200002dc 	.word	0x200002dc

08003d08 <_malloc_r>:
 8003d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	1ccd      	adds	r5, r1, #3
 8003d0e:	f025 0503 	bic.w	r5, r5, #3
 8003d12:	3508      	adds	r5, #8
 8003d14:	2d0c      	cmp	r5, #12
 8003d16:	bf38      	it	cc
 8003d18:	250c      	movcc	r5, #12
 8003d1a:	2d00      	cmp	r5, #0
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	db01      	blt.n	8003d24 <_malloc_r+0x1c>
 8003d20:	42a9      	cmp	r1, r5
 8003d22:	d904      	bls.n	8003d2e <_malloc_r+0x26>
 8003d24:	230c      	movs	r3, #12
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	2000      	movs	r0, #0
 8003d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e04 <_malloc_r+0xfc>
 8003d32:	f000 f869 	bl	8003e08 <__malloc_lock>
 8003d36:	f8d8 3000 	ldr.w	r3, [r8]
 8003d3a:	461c      	mov	r4, r3
 8003d3c:	bb44      	cbnz	r4, 8003d90 <_malloc_r+0x88>
 8003d3e:	4629      	mov	r1, r5
 8003d40:	4630      	mov	r0, r6
 8003d42:	f7ff ffbf 	bl	8003cc4 <sbrk_aligned>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	4604      	mov	r4, r0
 8003d4a:	d158      	bne.n	8003dfe <_malloc_r+0xf6>
 8003d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d50:	4627      	mov	r7, r4
 8003d52:	2f00      	cmp	r7, #0
 8003d54:	d143      	bne.n	8003dde <_malloc_r+0xd6>
 8003d56:	2c00      	cmp	r4, #0
 8003d58:	d04b      	beq.n	8003df2 <_malloc_r+0xea>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	4639      	mov	r1, r7
 8003d5e:	4630      	mov	r0, r6
 8003d60:	eb04 0903 	add.w	r9, r4, r3
 8003d64:	f000 fb60 	bl	8004428 <_sbrk_r>
 8003d68:	4581      	cmp	r9, r0
 8003d6a:	d142      	bne.n	8003df2 <_malloc_r+0xea>
 8003d6c:	6821      	ldr	r1, [r4, #0]
 8003d6e:	4630      	mov	r0, r6
 8003d70:	1a6d      	subs	r5, r5, r1
 8003d72:	4629      	mov	r1, r5
 8003d74:	f7ff ffa6 	bl	8003cc4 <sbrk_aligned>
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d03a      	beq.n	8003df2 <_malloc_r+0xea>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	442b      	add	r3, r5
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	f8d8 3000 	ldr.w	r3, [r8]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	bb62      	cbnz	r2, 8003de4 <_malloc_r+0xdc>
 8003d8a:	f8c8 7000 	str.w	r7, [r8]
 8003d8e:	e00f      	b.n	8003db0 <_malloc_r+0xa8>
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	1b52      	subs	r2, r2, r5
 8003d94:	d420      	bmi.n	8003dd8 <_malloc_r+0xd0>
 8003d96:	2a0b      	cmp	r2, #11
 8003d98:	d917      	bls.n	8003dca <_malloc_r+0xc2>
 8003d9a:	1961      	adds	r1, r4, r5
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	6025      	str	r5, [r4, #0]
 8003da0:	bf18      	it	ne
 8003da2:	6059      	strne	r1, [r3, #4]
 8003da4:	6863      	ldr	r3, [r4, #4]
 8003da6:	bf08      	it	eq
 8003da8:	f8c8 1000 	streq.w	r1, [r8]
 8003dac:	5162      	str	r2, [r4, r5]
 8003dae:	604b      	str	r3, [r1, #4]
 8003db0:	4630      	mov	r0, r6
 8003db2:	f000 f82f 	bl	8003e14 <__malloc_unlock>
 8003db6:	f104 000b 	add.w	r0, r4, #11
 8003dba:	1d23      	adds	r3, r4, #4
 8003dbc:	f020 0007 	bic.w	r0, r0, #7
 8003dc0:	1ac2      	subs	r2, r0, r3
 8003dc2:	bf1c      	itt	ne
 8003dc4:	1a1b      	subne	r3, r3, r0
 8003dc6:	50a3      	strne	r3, [r4, r2]
 8003dc8:	e7af      	b.n	8003d2a <_malloc_r+0x22>
 8003dca:	6862      	ldr	r2, [r4, #4]
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	bf0c      	ite	eq
 8003dd0:	f8c8 2000 	streq.w	r2, [r8]
 8003dd4:	605a      	strne	r2, [r3, #4]
 8003dd6:	e7eb      	b.n	8003db0 <_malloc_r+0xa8>
 8003dd8:	4623      	mov	r3, r4
 8003dda:	6864      	ldr	r4, [r4, #4]
 8003ddc:	e7ae      	b.n	8003d3c <_malloc_r+0x34>
 8003dde:	463c      	mov	r4, r7
 8003de0:	687f      	ldr	r7, [r7, #4]
 8003de2:	e7b6      	b.n	8003d52 <_malloc_r+0x4a>
 8003de4:	461a      	mov	r2, r3
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	42a3      	cmp	r3, r4
 8003dea:	d1fb      	bne.n	8003de4 <_malloc_r+0xdc>
 8003dec:	2300      	movs	r3, #0
 8003dee:	6053      	str	r3, [r2, #4]
 8003df0:	e7de      	b.n	8003db0 <_malloc_r+0xa8>
 8003df2:	230c      	movs	r3, #12
 8003df4:	4630      	mov	r0, r6
 8003df6:	6033      	str	r3, [r6, #0]
 8003df8:	f000 f80c 	bl	8003e14 <__malloc_unlock>
 8003dfc:	e794      	b.n	8003d28 <_malloc_r+0x20>
 8003dfe:	6005      	str	r5, [r0, #0]
 8003e00:	e7d6      	b.n	8003db0 <_malloc_r+0xa8>
 8003e02:	bf00      	nop
 8003e04:	200002e0 	.word	0x200002e0

08003e08 <__malloc_lock>:
 8003e08:	4801      	ldr	r0, [pc, #4]	@ (8003e10 <__malloc_lock+0x8>)
 8003e0a:	f7ff bf11 	b.w	8003c30 <__retarget_lock_acquire_recursive>
 8003e0e:	bf00      	nop
 8003e10:	200002d8 	.word	0x200002d8

08003e14 <__malloc_unlock>:
 8003e14:	4801      	ldr	r0, [pc, #4]	@ (8003e1c <__malloc_unlock+0x8>)
 8003e16:	f7ff bf0c 	b.w	8003c32 <__retarget_lock_release_recursive>
 8003e1a:	bf00      	nop
 8003e1c:	200002d8 	.word	0x200002d8

08003e20 <__ssputs_r>:
 8003e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	461f      	mov	r7, r3
 8003e26:	688e      	ldr	r6, [r1, #8]
 8003e28:	4682      	mov	sl, r0
 8003e2a:	42be      	cmp	r6, r7
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	4690      	mov	r8, r2
 8003e30:	680b      	ldr	r3, [r1, #0]
 8003e32:	d82d      	bhi.n	8003e90 <__ssputs_r+0x70>
 8003e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e3c:	d026      	beq.n	8003e8c <__ssputs_r+0x6c>
 8003e3e:	6965      	ldr	r5, [r4, #20]
 8003e40:	6909      	ldr	r1, [r1, #16]
 8003e42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e46:	eba3 0901 	sub.w	r9, r3, r1
 8003e4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e4e:	1c7b      	adds	r3, r7, #1
 8003e50:	444b      	add	r3, r9
 8003e52:	106d      	asrs	r5, r5, #1
 8003e54:	429d      	cmp	r5, r3
 8003e56:	bf38      	it	cc
 8003e58:	461d      	movcc	r5, r3
 8003e5a:	0553      	lsls	r3, r2, #21
 8003e5c:	d527      	bpl.n	8003eae <__ssputs_r+0x8e>
 8003e5e:	4629      	mov	r1, r5
 8003e60:	f7ff ff52 	bl	8003d08 <_malloc_r>
 8003e64:	4606      	mov	r6, r0
 8003e66:	b360      	cbz	r0, 8003ec2 <__ssputs_r+0xa2>
 8003e68:	464a      	mov	r2, r9
 8003e6a:	6921      	ldr	r1, [r4, #16]
 8003e6c:	f000 fafa 	bl	8004464 <memcpy>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	6126      	str	r6, [r4, #16]
 8003e7e:	444e      	add	r6, r9
 8003e80:	6026      	str	r6, [r4, #0]
 8003e82:	463e      	mov	r6, r7
 8003e84:	6165      	str	r5, [r4, #20]
 8003e86:	eba5 0509 	sub.w	r5, r5, r9
 8003e8a:	60a5      	str	r5, [r4, #8]
 8003e8c:	42be      	cmp	r6, r7
 8003e8e:	d900      	bls.n	8003e92 <__ssputs_r+0x72>
 8003e90:	463e      	mov	r6, r7
 8003e92:	4632      	mov	r2, r6
 8003e94:	4641      	mov	r1, r8
 8003e96:	6820      	ldr	r0, [r4, #0]
 8003e98:	f000 faac 	bl	80043f4 <memmove>
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	68a3      	ldr	r3, [r4, #8]
 8003ea0:	1b9b      	subs	r3, r3, r6
 8003ea2:	60a3      	str	r3, [r4, #8]
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	4433      	add	r3, r6
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eae:	462a      	mov	r2, r5
 8003eb0:	f000 fae6 	bl	8004480 <_realloc_r>
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d1e0      	bne.n	8003e7c <__ssputs_r+0x5c>
 8003eba:	4650      	mov	r0, sl
 8003ebc:	6921      	ldr	r1, [r4, #16]
 8003ebe:	f7ff feb9 	bl	8003c34 <_free_r>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	f8ca 3000 	str.w	r3, [sl]
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295
 8003ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ed2:	81a3      	strh	r3, [r4, #12]
 8003ed4:	e7e9      	b.n	8003eaa <__ssputs_r+0x8a>
	...

08003ed8 <_svfiprintf_r>:
 8003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003edc:	4698      	mov	r8, r3
 8003ede:	898b      	ldrh	r3, [r1, #12]
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	061b      	lsls	r3, r3, #24
 8003ee4:	460d      	mov	r5, r1
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	b09d      	sub	sp, #116	@ 0x74
 8003eea:	d510      	bpl.n	8003f0e <_svfiprintf_r+0x36>
 8003eec:	690b      	ldr	r3, [r1, #16]
 8003eee:	b973      	cbnz	r3, 8003f0e <_svfiprintf_r+0x36>
 8003ef0:	2140      	movs	r1, #64	@ 0x40
 8003ef2:	f7ff ff09 	bl	8003d08 <_malloc_r>
 8003ef6:	6028      	str	r0, [r5, #0]
 8003ef8:	6128      	str	r0, [r5, #16]
 8003efa:	b930      	cbnz	r0, 8003f0a <_svfiprintf_r+0x32>
 8003efc:	230c      	movs	r3, #12
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	b01d      	add	sp, #116	@ 0x74
 8003f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0a:	2340      	movs	r3, #64	@ 0x40
 8003f0c:	616b      	str	r3, [r5, #20]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f12:	2320      	movs	r3, #32
 8003f14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f18:	2330      	movs	r3, #48	@ 0x30
 8003f1a:	f04f 0901 	mov.w	r9, #1
 8003f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f22:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80040bc <_svfiprintf_r+0x1e4>
 8003f26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	469a      	mov	sl, r3
 8003f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f32:	b10a      	cbz	r2, 8003f38 <_svfiprintf_r+0x60>
 8003f34:	2a25      	cmp	r2, #37	@ 0x25
 8003f36:	d1f9      	bne.n	8003f2c <_svfiprintf_r+0x54>
 8003f38:	ebba 0b04 	subs.w	fp, sl, r4
 8003f3c:	d00b      	beq.n	8003f56 <_svfiprintf_r+0x7e>
 8003f3e:	465b      	mov	r3, fp
 8003f40:	4622      	mov	r2, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	4638      	mov	r0, r7
 8003f46:	f7ff ff6b 	bl	8003e20 <__ssputs_r>
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f000 80a7 	beq.w	800409e <_svfiprintf_r+0x1c6>
 8003f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f52:	445a      	add	r2, fp
 8003f54:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f56:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 809f 	beq.w	800409e <_svfiprintf_r+0x1c6>
 8003f60:	2300      	movs	r3, #0
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6a:	f10a 0a01 	add.w	sl, sl, #1
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9307      	str	r3, [sp, #28]
 8003f72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f76:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f78:	4654      	mov	r4, sl
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f80:	484e      	ldr	r0, [pc, #312]	@ (80040bc <_svfiprintf_r+0x1e4>)
 8003f82:	f000 fa61 	bl	8004448 <memchr>
 8003f86:	9a04      	ldr	r2, [sp, #16]
 8003f88:	b9d8      	cbnz	r0, 8003fc2 <_svfiprintf_r+0xea>
 8003f8a:	06d0      	lsls	r0, r2, #27
 8003f8c:	bf44      	itt	mi
 8003f8e:	2320      	movmi	r3, #32
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f94:	0711      	lsls	r1, r2, #28
 8003f96:	bf44      	itt	mi
 8003f98:	232b      	movmi	r3, #43	@ 0x2b
 8003f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fa4:	d015      	beq.n	8003fd2 <_svfiprintf_r+0xfa>
 8003fa6:	4654      	mov	r4, sl
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f04f 0c0a 	mov.w	ip, #10
 8003fae:	9a07      	ldr	r2, [sp, #28]
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb6:	3b30      	subs	r3, #48	@ 0x30
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d94b      	bls.n	8004054 <_svfiprintf_r+0x17c>
 8003fbc:	b1b0      	cbz	r0, 8003fec <_svfiprintf_r+0x114>
 8003fbe:	9207      	str	r2, [sp, #28]
 8003fc0:	e014      	b.n	8003fec <_svfiprintf_r+0x114>
 8003fc2:	eba0 0308 	sub.w	r3, r0, r8
 8003fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	46a2      	mov	sl, r4
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	e7d2      	b.n	8003f78 <_svfiprintf_r+0xa0>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	1d19      	adds	r1, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	9103      	str	r1, [sp, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfbb      	ittet	lt
 8003fde:	425b      	neglt	r3, r3
 8003fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe4:	9307      	strge	r3, [sp, #28]
 8003fe6:	9307      	strlt	r3, [sp, #28]
 8003fe8:	bfb8      	it	lt
 8003fea:	9204      	strlt	r2, [sp, #16]
 8003fec:	7823      	ldrb	r3, [r4, #0]
 8003fee:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ff0:	d10a      	bne.n	8004008 <_svfiprintf_r+0x130>
 8003ff2:	7863      	ldrb	r3, [r4, #1]
 8003ff4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ff6:	d132      	bne.n	800405e <_svfiprintf_r+0x186>
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	3402      	adds	r4, #2
 8003ffc:	1d1a      	adds	r2, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	9203      	str	r2, [sp, #12]
 8004002:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004006:	9305      	str	r3, [sp, #20]
 8004008:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80040c0 <_svfiprintf_r+0x1e8>
 800400c:	2203      	movs	r2, #3
 800400e:	4650      	mov	r0, sl
 8004010:	7821      	ldrb	r1, [r4, #0]
 8004012:	f000 fa19 	bl	8004448 <memchr>
 8004016:	b138      	cbz	r0, 8004028 <_svfiprintf_r+0x150>
 8004018:	2240      	movs	r2, #64	@ 0x40
 800401a:	9b04      	ldr	r3, [sp, #16]
 800401c:	eba0 000a 	sub.w	r0, r0, sl
 8004020:	4082      	lsls	r2, r0
 8004022:	4313      	orrs	r3, r2
 8004024:	3401      	adds	r4, #1
 8004026:	9304      	str	r3, [sp, #16]
 8004028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402c:	2206      	movs	r2, #6
 800402e:	4825      	ldr	r0, [pc, #148]	@ (80040c4 <_svfiprintf_r+0x1ec>)
 8004030:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004034:	f000 fa08 	bl	8004448 <memchr>
 8004038:	2800      	cmp	r0, #0
 800403a:	d036      	beq.n	80040aa <_svfiprintf_r+0x1d2>
 800403c:	4b22      	ldr	r3, [pc, #136]	@ (80040c8 <_svfiprintf_r+0x1f0>)
 800403e:	bb1b      	cbnz	r3, 8004088 <_svfiprintf_r+0x1b0>
 8004040:	9b03      	ldr	r3, [sp, #12]
 8004042:	3307      	adds	r3, #7
 8004044:	f023 0307 	bic.w	r3, r3, #7
 8004048:	3308      	adds	r3, #8
 800404a:	9303      	str	r3, [sp, #12]
 800404c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800404e:	4433      	add	r3, r6
 8004050:	9309      	str	r3, [sp, #36]	@ 0x24
 8004052:	e76a      	b.n	8003f2a <_svfiprintf_r+0x52>
 8004054:	460c      	mov	r4, r1
 8004056:	2001      	movs	r0, #1
 8004058:	fb0c 3202 	mla	r2, ip, r2, r3
 800405c:	e7a8      	b.n	8003fb0 <_svfiprintf_r+0xd8>
 800405e:	2300      	movs	r3, #0
 8004060:	f04f 0c0a 	mov.w	ip, #10
 8004064:	4619      	mov	r1, r3
 8004066:	3401      	adds	r4, #1
 8004068:	9305      	str	r3, [sp, #20]
 800406a:	4620      	mov	r0, r4
 800406c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004070:	3a30      	subs	r2, #48	@ 0x30
 8004072:	2a09      	cmp	r2, #9
 8004074:	d903      	bls.n	800407e <_svfiprintf_r+0x1a6>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0c6      	beq.n	8004008 <_svfiprintf_r+0x130>
 800407a:	9105      	str	r1, [sp, #20]
 800407c:	e7c4      	b.n	8004008 <_svfiprintf_r+0x130>
 800407e:	4604      	mov	r4, r0
 8004080:	2301      	movs	r3, #1
 8004082:	fb0c 2101 	mla	r1, ip, r1, r2
 8004086:	e7f0      	b.n	800406a <_svfiprintf_r+0x192>
 8004088:	ab03      	add	r3, sp, #12
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	462a      	mov	r2, r5
 800408e:	4638      	mov	r0, r7
 8004090:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <_svfiprintf_r+0x1f4>)
 8004092:	a904      	add	r1, sp, #16
 8004094:	f3af 8000 	nop.w
 8004098:	1c42      	adds	r2, r0, #1
 800409a:	4606      	mov	r6, r0
 800409c:	d1d6      	bne.n	800404c <_svfiprintf_r+0x174>
 800409e:	89ab      	ldrh	r3, [r5, #12]
 80040a0:	065b      	lsls	r3, r3, #25
 80040a2:	f53f af2d 	bmi.w	8003f00 <_svfiprintf_r+0x28>
 80040a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040a8:	e72c      	b.n	8003f04 <_svfiprintf_r+0x2c>
 80040aa:	ab03      	add	r3, sp, #12
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	462a      	mov	r2, r5
 80040b0:	4638      	mov	r0, r7
 80040b2:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <_svfiprintf_r+0x1f4>)
 80040b4:	a904      	add	r1, sp, #16
 80040b6:	f000 f87d 	bl	80041b4 <_printf_i>
 80040ba:	e7ed      	b.n	8004098 <_svfiprintf_r+0x1c0>
 80040bc:	0800456e 	.word	0x0800456e
 80040c0:	08004574 	.word	0x08004574
 80040c4:	08004578 	.word	0x08004578
 80040c8:	00000000 	.word	0x00000000
 80040cc:	08003e21 	.word	0x08003e21

080040d0 <_printf_common>:
 80040d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d4:	4616      	mov	r6, r2
 80040d6:	4698      	mov	r8, r3
 80040d8:	688a      	ldr	r2, [r1, #8]
 80040da:	690b      	ldr	r3, [r1, #16]
 80040dc:	4607      	mov	r7, r0
 80040de:	4293      	cmp	r3, r2
 80040e0:	bfb8      	it	lt
 80040e2:	4613      	movlt	r3, r2
 80040e4:	6033      	str	r3, [r6, #0]
 80040e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040ea:	460c      	mov	r4, r1
 80040ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040f0:	b10a      	cbz	r2, 80040f6 <_printf_common+0x26>
 80040f2:	3301      	adds	r3, #1
 80040f4:	6033      	str	r3, [r6, #0]
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	0699      	lsls	r1, r3, #26
 80040fa:	bf42      	ittt	mi
 80040fc:	6833      	ldrmi	r3, [r6, #0]
 80040fe:	3302      	addmi	r3, #2
 8004100:	6033      	strmi	r3, [r6, #0]
 8004102:	6825      	ldr	r5, [r4, #0]
 8004104:	f015 0506 	ands.w	r5, r5, #6
 8004108:	d106      	bne.n	8004118 <_printf_common+0x48>
 800410a:	f104 0a19 	add.w	sl, r4, #25
 800410e:	68e3      	ldr	r3, [r4, #12]
 8004110:	6832      	ldr	r2, [r6, #0]
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	42ab      	cmp	r3, r5
 8004116:	dc2b      	bgt.n	8004170 <_printf_common+0xa0>
 8004118:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800411c:	6822      	ldr	r2, [r4, #0]
 800411e:	3b00      	subs	r3, #0
 8004120:	bf18      	it	ne
 8004122:	2301      	movne	r3, #1
 8004124:	0692      	lsls	r2, r2, #26
 8004126:	d430      	bmi.n	800418a <_printf_common+0xba>
 8004128:	4641      	mov	r1, r8
 800412a:	4638      	mov	r0, r7
 800412c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004130:	47c8      	blx	r9
 8004132:	3001      	adds	r0, #1
 8004134:	d023      	beq.n	800417e <_printf_common+0xae>
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	6922      	ldr	r2, [r4, #16]
 800413a:	f003 0306 	and.w	r3, r3, #6
 800413e:	2b04      	cmp	r3, #4
 8004140:	bf14      	ite	ne
 8004142:	2500      	movne	r5, #0
 8004144:	6833      	ldreq	r3, [r6, #0]
 8004146:	f04f 0600 	mov.w	r6, #0
 800414a:	bf08      	it	eq
 800414c:	68e5      	ldreq	r5, [r4, #12]
 800414e:	f104 041a 	add.w	r4, r4, #26
 8004152:	bf08      	it	eq
 8004154:	1aed      	subeq	r5, r5, r3
 8004156:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800415a:	bf08      	it	eq
 800415c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004160:	4293      	cmp	r3, r2
 8004162:	bfc4      	itt	gt
 8004164:	1a9b      	subgt	r3, r3, r2
 8004166:	18ed      	addgt	r5, r5, r3
 8004168:	42b5      	cmp	r5, r6
 800416a:	d11a      	bne.n	80041a2 <_printf_common+0xd2>
 800416c:	2000      	movs	r0, #0
 800416e:	e008      	b.n	8004182 <_printf_common+0xb2>
 8004170:	2301      	movs	r3, #1
 8004172:	4652      	mov	r2, sl
 8004174:	4641      	mov	r1, r8
 8004176:	4638      	mov	r0, r7
 8004178:	47c8      	blx	r9
 800417a:	3001      	adds	r0, #1
 800417c:	d103      	bne.n	8004186 <_printf_common+0xb6>
 800417e:	f04f 30ff 	mov.w	r0, #4294967295
 8004182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004186:	3501      	adds	r5, #1
 8004188:	e7c1      	b.n	800410e <_printf_common+0x3e>
 800418a:	2030      	movs	r0, #48	@ 0x30
 800418c:	18e1      	adds	r1, r4, r3
 800418e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004198:	4422      	add	r2, r4
 800419a:	3302      	adds	r3, #2
 800419c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041a0:	e7c2      	b.n	8004128 <_printf_common+0x58>
 80041a2:	2301      	movs	r3, #1
 80041a4:	4622      	mov	r2, r4
 80041a6:	4641      	mov	r1, r8
 80041a8:	4638      	mov	r0, r7
 80041aa:	47c8      	blx	r9
 80041ac:	3001      	adds	r0, #1
 80041ae:	d0e6      	beq.n	800417e <_printf_common+0xae>
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7d9      	b.n	8004168 <_printf_common+0x98>

080041b4 <_printf_i>:
 80041b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041b8:	7e0f      	ldrb	r7, [r1, #24]
 80041ba:	4691      	mov	r9, r2
 80041bc:	2f78      	cmp	r7, #120	@ 0x78
 80041be:	4680      	mov	r8, r0
 80041c0:	460c      	mov	r4, r1
 80041c2:	469a      	mov	sl, r3
 80041c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041ca:	d807      	bhi.n	80041dc <_printf_i+0x28>
 80041cc:	2f62      	cmp	r7, #98	@ 0x62
 80041ce:	d80a      	bhi.n	80041e6 <_printf_i+0x32>
 80041d0:	2f00      	cmp	r7, #0
 80041d2:	f000 80d3 	beq.w	800437c <_printf_i+0x1c8>
 80041d6:	2f58      	cmp	r7, #88	@ 0x58
 80041d8:	f000 80ba 	beq.w	8004350 <_printf_i+0x19c>
 80041dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041e4:	e03a      	b.n	800425c <_printf_i+0xa8>
 80041e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041ea:	2b15      	cmp	r3, #21
 80041ec:	d8f6      	bhi.n	80041dc <_printf_i+0x28>
 80041ee:	a101      	add	r1, pc, #4	@ (adr r1, 80041f4 <_printf_i+0x40>)
 80041f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041f4:	0800424d 	.word	0x0800424d
 80041f8:	08004261 	.word	0x08004261
 80041fc:	080041dd 	.word	0x080041dd
 8004200:	080041dd 	.word	0x080041dd
 8004204:	080041dd 	.word	0x080041dd
 8004208:	080041dd 	.word	0x080041dd
 800420c:	08004261 	.word	0x08004261
 8004210:	080041dd 	.word	0x080041dd
 8004214:	080041dd 	.word	0x080041dd
 8004218:	080041dd 	.word	0x080041dd
 800421c:	080041dd 	.word	0x080041dd
 8004220:	08004363 	.word	0x08004363
 8004224:	0800428b 	.word	0x0800428b
 8004228:	0800431d 	.word	0x0800431d
 800422c:	080041dd 	.word	0x080041dd
 8004230:	080041dd 	.word	0x080041dd
 8004234:	08004385 	.word	0x08004385
 8004238:	080041dd 	.word	0x080041dd
 800423c:	0800428b 	.word	0x0800428b
 8004240:	080041dd 	.word	0x080041dd
 8004244:	080041dd 	.word	0x080041dd
 8004248:	08004325 	.word	0x08004325
 800424c:	6833      	ldr	r3, [r6, #0]
 800424e:	1d1a      	adds	r2, r3, #4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6032      	str	r2, [r6, #0]
 8004254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800425c:	2301      	movs	r3, #1
 800425e:	e09e      	b.n	800439e <_printf_i+0x1ea>
 8004260:	6833      	ldr	r3, [r6, #0]
 8004262:	6820      	ldr	r0, [r4, #0]
 8004264:	1d19      	adds	r1, r3, #4
 8004266:	6031      	str	r1, [r6, #0]
 8004268:	0606      	lsls	r6, r0, #24
 800426a:	d501      	bpl.n	8004270 <_printf_i+0xbc>
 800426c:	681d      	ldr	r5, [r3, #0]
 800426e:	e003      	b.n	8004278 <_printf_i+0xc4>
 8004270:	0645      	lsls	r5, r0, #25
 8004272:	d5fb      	bpl.n	800426c <_printf_i+0xb8>
 8004274:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004278:	2d00      	cmp	r5, #0
 800427a:	da03      	bge.n	8004284 <_printf_i+0xd0>
 800427c:	232d      	movs	r3, #45	@ 0x2d
 800427e:	426d      	negs	r5, r5
 8004280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004284:	230a      	movs	r3, #10
 8004286:	4859      	ldr	r0, [pc, #356]	@ (80043ec <_printf_i+0x238>)
 8004288:	e011      	b.n	80042ae <_printf_i+0xfa>
 800428a:	6821      	ldr	r1, [r4, #0]
 800428c:	6833      	ldr	r3, [r6, #0]
 800428e:	0608      	lsls	r0, r1, #24
 8004290:	f853 5b04 	ldr.w	r5, [r3], #4
 8004294:	d402      	bmi.n	800429c <_printf_i+0xe8>
 8004296:	0649      	lsls	r1, r1, #25
 8004298:	bf48      	it	mi
 800429a:	b2ad      	uxthmi	r5, r5
 800429c:	2f6f      	cmp	r7, #111	@ 0x6f
 800429e:	6033      	str	r3, [r6, #0]
 80042a0:	bf14      	ite	ne
 80042a2:	230a      	movne	r3, #10
 80042a4:	2308      	moveq	r3, #8
 80042a6:	4851      	ldr	r0, [pc, #324]	@ (80043ec <_printf_i+0x238>)
 80042a8:	2100      	movs	r1, #0
 80042aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042ae:	6866      	ldr	r6, [r4, #4]
 80042b0:	2e00      	cmp	r6, #0
 80042b2:	bfa8      	it	ge
 80042b4:	6821      	ldrge	r1, [r4, #0]
 80042b6:	60a6      	str	r6, [r4, #8]
 80042b8:	bfa4      	itt	ge
 80042ba:	f021 0104 	bicge.w	r1, r1, #4
 80042be:	6021      	strge	r1, [r4, #0]
 80042c0:	b90d      	cbnz	r5, 80042c6 <_printf_i+0x112>
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	d04b      	beq.n	800435e <_printf_i+0x1aa>
 80042c6:	4616      	mov	r6, r2
 80042c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80042cc:	fb03 5711 	mls	r7, r3, r1, r5
 80042d0:	5dc7      	ldrb	r7, [r0, r7]
 80042d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042d6:	462f      	mov	r7, r5
 80042d8:	42bb      	cmp	r3, r7
 80042da:	460d      	mov	r5, r1
 80042dc:	d9f4      	bls.n	80042c8 <_printf_i+0x114>
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d10b      	bne.n	80042fa <_printf_i+0x146>
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	07df      	lsls	r7, r3, #31
 80042e6:	d508      	bpl.n	80042fa <_printf_i+0x146>
 80042e8:	6923      	ldr	r3, [r4, #16]
 80042ea:	6861      	ldr	r1, [r4, #4]
 80042ec:	4299      	cmp	r1, r3
 80042ee:	bfde      	ittt	le
 80042f0:	2330      	movle	r3, #48	@ 0x30
 80042f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042fa:	1b92      	subs	r2, r2, r6
 80042fc:	6122      	str	r2, [r4, #16]
 80042fe:	464b      	mov	r3, r9
 8004300:	4621      	mov	r1, r4
 8004302:	4640      	mov	r0, r8
 8004304:	f8cd a000 	str.w	sl, [sp]
 8004308:	aa03      	add	r2, sp, #12
 800430a:	f7ff fee1 	bl	80040d0 <_printf_common>
 800430e:	3001      	adds	r0, #1
 8004310:	d14a      	bne.n	80043a8 <_printf_i+0x1f4>
 8004312:	f04f 30ff 	mov.w	r0, #4294967295
 8004316:	b004      	add	sp, #16
 8004318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	f043 0320 	orr.w	r3, r3, #32
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	2778      	movs	r7, #120	@ 0x78
 8004326:	4832      	ldr	r0, [pc, #200]	@ (80043f0 <_printf_i+0x23c>)
 8004328:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	6831      	ldr	r1, [r6, #0]
 8004330:	061f      	lsls	r7, r3, #24
 8004332:	f851 5b04 	ldr.w	r5, [r1], #4
 8004336:	d402      	bmi.n	800433e <_printf_i+0x18a>
 8004338:	065f      	lsls	r7, r3, #25
 800433a:	bf48      	it	mi
 800433c:	b2ad      	uxthmi	r5, r5
 800433e:	6031      	str	r1, [r6, #0]
 8004340:	07d9      	lsls	r1, r3, #31
 8004342:	bf44      	itt	mi
 8004344:	f043 0320 	orrmi.w	r3, r3, #32
 8004348:	6023      	strmi	r3, [r4, #0]
 800434a:	b11d      	cbz	r5, 8004354 <_printf_i+0x1a0>
 800434c:	2310      	movs	r3, #16
 800434e:	e7ab      	b.n	80042a8 <_printf_i+0xf4>
 8004350:	4826      	ldr	r0, [pc, #152]	@ (80043ec <_printf_i+0x238>)
 8004352:	e7e9      	b.n	8004328 <_printf_i+0x174>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	e7f6      	b.n	800434c <_printf_i+0x198>
 800435e:	4616      	mov	r6, r2
 8004360:	e7bd      	b.n	80042de <_printf_i+0x12a>
 8004362:	6833      	ldr	r3, [r6, #0]
 8004364:	6825      	ldr	r5, [r4, #0]
 8004366:	1d18      	adds	r0, r3, #4
 8004368:	6961      	ldr	r1, [r4, #20]
 800436a:	6030      	str	r0, [r6, #0]
 800436c:	062e      	lsls	r6, r5, #24
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	d501      	bpl.n	8004376 <_printf_i+0x1c2>
 8004372:	6019      	str	r1, [r3, #0]
 8004374:	e002      	b.n	800437c <_printf_i+0x1c8>
 8004376:	0668      	lsls	r0, r5, #25
 8004378:	d5fb      	bpl.n	8004372 <_printf_i+0x1be>
 800437a:	8019      	strh	r1, [r3, #0]
 800437c:	2300      	movs	r3, #0
 800437e:	4616      	mov	r6, r2
 8004380:	6123      	str	r3, [r4, #16]
 8004382:	e7bc      	b.n	80042fe <_printf_i+0x14a>
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	2100      	movs	r1, #0
 8004388:	1d1a      	adds	r2, r3, #4
 800438a:	6032      	str	r2, [r6, #0]
 800438c:	681e      	ldr	r6, [r3, #0]
 800438e:	6862      	ldr	r2, [r4, #4]
 8004390:	4630      	mov	r0, r6
 8004392:	f000 f859 	bl	8004448 <memchr>
 8004396:	b108      	cbz	r0, 800439c <_printf_i+0x1e8>
 8004398:	1b80      	subs	r0, r0, r6
 800439a:	6060      	str	r0, [r4, #4]
 800439c:	6863      	ldr	r3, [r4, #4]
 800439e:	6123      	str	r3, [r4, #16]
 80043a0:	2300      	movs	r3, #0
 80043a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043a6:	e7aa      	b.n	80042fe <_printf_i+0x14a>
 80043a8:	4632      	mov	r2, r6
 80043aa:	4649      	mov	r1, r9
 80043ac:	4640      	mov	r0, r8
 80043ae:	6923      	ldr	r3, [r4, #16]
 80043b0:	47d0      	blx	sl
 80043b2:	3001      	adds	r0, #1
 80043b4:	d0ad      	beq.n	8004312 <_printf_i+0x15e>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	079b      	lsls	r3, r3, #30
 80043ba:	d413      	bmi.n	80043e4 <_printf_i+0x230>
 80043bc:	68e0      	ldr	r0, [r4, #12]
 80043be:	9b03      	ldr	r3, [sp, #12]
 80043c0:	4298      	cmp	r0, r3
 80043c2:	bfb8      	it	lt
 80043c4:	4618      	movlt	r0, r3
 80043c6:	e7a6      	b.n	8004316 <_printf_i+0x162>
 80043c8:	2301      	movs	r3, #1
 80043ca:	4632      	mov	r2, r6
 80043cc:	4649      	mov	r1, r9
 80043ce:	4640      	mov	r0, r8
 80043d0:	47d0      	blx	sl
 80043d2:	3001      	adds	r0, #1
 80043d4:	d09d      	beq.n	8004312 <_printf_i+0x15e>
 80043d6:	3501      	adds	r5, #1
 80043d8:	68e3      	ldr	r3, [r4, #12]
 80043da:	9903      	ldr	r1, [sp, #12]
 80043dc:	1a5b      	subs	r3, r3, r1
 80043de:	42ab      	cmp	r3, r5
 80043e0:	dcf2      	bgt.n	80043c8 <_printf_i+0x214>
 80043e2:	e7eb      	b.n	80043bc <_printf_i+0x208>
 80043e4:	2500      	movs	r5, #0
 80043e6:	f104 0619 	add.w	r6, r4, #25
 80043ea:	e7f5      	b.n	80043d8 <_printf_i+0x224>
 80043ec:	0800457f 	.word	0x0800457f
 80043f0:	08004590 	.word	0x08004590

080043f4 <memmove>:
 80043f4:	4288      	cmp	r0, r1
 80043f6:	b510      	push	{r4, lr}
 80043f8:	eb01 0402 	add.w	r4, r1, r2
 80043fc:	d902      	bls.n	8004404 <memmove+0x10>
 80043fe:	4284      	cmp	r4, r0
 8004400:	4623      	mov	r3, r4
 8004402:	d807      	bhi.n	8004414 <memmove+0x20>
 8004404:	1e43      	subs	r3, r0, #1
 8004406:	42a1      	cmp	r1, r4
 8004408:	d008      	beq.n	800441c <memmove+0x28>
 800440a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800440e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004412:	e7f8      	b.n	8004406 <memmove+0x12>
 8004414:	4601      	mov	r1, r0
 8004416:	4402      	add	r2, r0
 8004418:	428a      	cmp	r2, r1
 800441a:	d100      	bne.n	800441e <memmove+0x2a>
 800441c:	bd10      	pop	{r4, pc}
 800441e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004426:	e7f7      	b.n	8004418 <memmove+0x24>

08004428 <_sbrk_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	2300      	movs	r3, #0
 800442c:	4d05      	ldr	r5, [pc, #20]	@ (8004444 <_sbrk_r+0x1c>)
 800442e:	4604      	mov	r4, r0
 8004430:	4608      	mov	r0, r1
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	f7fc ff92 	bl	800135c <_sbrk>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_sbrk_r+0x1a>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_sbrk_r+0x1a>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	200002d4 	.word	0x200002d4

08004448 <memchr>:
 8004448:	4603      	mov	r3, r0
 800444a:	b510      	push	{r4, lr}
 800444c:	b2c9      	uxtb	r1, r1
 800444e:	4402      	add	r2, r0
 8004450:	4293      	cmp	r3, r2
 8004452:	4618      	mov	r0, r3
 8004454:	d101      	bne.n	800445a <memchr+0x12>
 8004456:	2000      	movs	r0, #0
 8004458:	e003      	b.n	8004462 <memchr+0x1a>
 800445a:	7804      	ldrb	r4, [r0, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	428c      	cmp	r4, r1
 8004460:	d1f6      	bne.n	8004450 <memchr+0x8>
 8004462:	bd10      	pop	{r4, pc}

08004464 <memcpy>:
 8004464:	440a      	add	r2, r1
 8004466:	4291      	cmp	r1, r2
 8004468:	f100 33ff 	add.w	r3, r0, #4294967295
 800446c:	d100      	bne.n	8004470 <memcpy+0xc>
 800446e:	4770      	bx	lr
 8004470:	b510      	push	{r4, lr}
 8004472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004476:	4291      	cmp	r1, r2
 8004478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800447c:	d1f9      	bne.n	8004472 <memcpy+0xe>
 800447e:	bd10      	pop	{r4, pc}

08004480 <_realloc_r>:
 8004480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004484:	4680      	mov	r8, r0
 8004486:	4615      	mov	r5, r2
 8004488:	460c      	mov	r4, r1
 800448a:	b921      	cbnz	r1, 8004496 <_realloc_r+0x16>
 800448c:	4611      	mov	r1, r2
 800448e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004492:	f7ff bc39 	b.w	8003d08 <_malloc_r>
 8004496:	b92a      	cbnz	r2, 80044a4 <_realloc_r+0x24>
 8004498:	f7ff fbcc 	bl	8003c34 <_free_r>
 800449c:	2400      	movs	r4, #0
 800449e:	4620      	mov	r0, r4
 80044a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a4:	f000 f81a 	bl	80044dc <_malloc_usable_size_r>
 80044a8:	4285      	cmp	r5, r0
 80044aa:	4606      	mov	r6, r0
 80044ac:	d802      	bhi.n	80044b4 <_realloc_r+0x34>
 80044ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044b2:	d8f4      	bhi.n	800449e <_realloc_r+0x1e>
 80044b4:	4629      	mov	r1, r5
 80044b6:	4640      	mov	r0, r8
 80044b8:	f7ff fc26 	bl	8003d08 <_malloc_r>
 80044bc:	4607      	mov	r7, r0
 80044be:	2800      	cmp	r0, #0
 80044c0:	d0ec      	beq.n	800449c <_realloc_r+0x1c>
 80044c2:	42b5      	cmp	r5, r6
 80044c4:	462a      	mov	r2, r5
 80044c6:	4621      	mov	r1, r4
 80044c8:	bf28      	it	cs
 80044ca:	4632      	movcs	r2, r6
 80044cc:	f7ff ffca 	bl	8004464 <memcpy>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4640      	mov	r0, r8
 80044d4:	f7ff fbae 	bl	8003c34 <_free_r>
 80044d8:	463c      	mov	r4, r7
 80044da:	e7e0      	b.n	800449e <_realloc_r+0x1e>

080044dc <_malloc_usable_size_r>:
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f18      	subs	r0, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfbc      	itt	lt
 80044e6:	580b      	ldrlt	r3, [r1, r0]
 80044e8:	18c0      	addlt	r0, r0, r3
 80044ea:	4770      	bx	lr

080044ec <_init>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr

080044f8 <_fini>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr
